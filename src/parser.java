
//----------------------------------------------------
// The following code was generated by CUP v0.10k TUM Edition 20050516
// Sun May 11 19:10:17 PDT 2014
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.Vector;

/** CUP v0.10k TUM Edition 20050516 generated parser.
  * @version Sun May 11 19:10:17 PDT 2014
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\270\000\002\114\002\000\002\003\004\000\002\002" +
    "\004\000\002\004\003\000\002\004\002\000\002\005\003" +
    "\000\002\005\004\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\011\006\000\002\012\006\000\002\012" +
    "\010\000\002\013\007\000\002\013\011\000\002\043\003" +
    "\000\002\043\002\000\002\014\006\000\002\115\002\000" +
    "\002\014\011\000\002\070\003\000\002\070\004\000\002" +
    "\113\005\000\002\116\002\000\002\117\002\000\002\007" +
    "\017\000\002\120\002\000\002\121\002\000\002\010\015" +
    "\000\002\073\004\000\002\073\011\000\002\074\003\000" +
    "\002\074\011\000\002\072\003\000\002\072\003\000\002" +
    "\072\003\000\002\122\002\000\002\076\007\000\002\071" +
    "\003\000\002\071\003\000\002\071\003\000\002\071\003" +
    "\000\002\077\003\000\002\077\005\000\002\077\002\000" +
    "\002\102\003\000\002\102\002\000\002\101\003\000\002" +
    "\101\004\000\002\100\003\000\002\075\004\000\002\075" +
    "\003\000\002\123\002\000\002\124\002\000\002\020\007" +
    "\000\002\015\003\000\002\015\002\000\002\016\003\000" +
    "\002\016\004\000\002\017\003\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\004\000\002\017" +
    "\003\000\002\017\003\000\002\017\003\000\002\017\003" +
    "\000\002\017\003\000\002\017\003\000\002\017\003\000" +
    "\002\017\003\000\002\017\003\000\002\017\003\000\002" +
    "\107\003\000\002\107\002\000\002\110\003\000\002\110" +
    "\005\000\002\066\005\000\002\041\003\000\002\041\002" +
    "\000\002\103\004\000\002\103\006\000\002\104\003\000" +
    "\002\104\005\000\002\105\005\000\002\105\007\000\002" +
    "\106\006\000\002\106\010\000\002\065\004\000\002\065" +
    "\006\000\002\065\002\000\002\035\003\000\002\035\005" +
    "\000\002\125\002\000\002\126\002\000\002\021\010\000" +
    "\002\127\002\000\002\042\005\000\002\042\002\000\002" +
    "\130\002\000\002\022\006\000\002\023\004\000\002\024" +
    "\004\000\002\025\007\000\002\026\004\000\002\026\005" +
    "\000\002\027\006\000\002\031\005\000\002\032\005\000" +
    "\002\030\006\000\002\045\003\000\002\045\005\000\002" +
    "\046\003\000\002\046\003\000\002\067\003\000\002\111" +
    "\003\000\002\111\002\000\002\112\003\000\002\112\005" +
    "\000\002\047\005\000\002\047\003\000\002\050\005\000" +
    "\002\050\003\000\002\051\005\000\002\051\003\000\002" +
    "\052\005\000\002\052\003\000\002\053\005\000\002\053" +
    "\003\000\002\054\005\000\002\054\003\000\002\055\005" +
    "\000\002\055\003\000\002\056\005\000\002\056\003\000" +
    "\002\057\005\000\002\057\003\000\002\060\005\000\002" +
    "\060\003\000\002\033\003\000\002\033\003\000\002\044" +
    "\003\000\002\044\003\000\002\034\003\000\002\034\003" +
    "\000\002\034\003\000\002\034\003\000\002\036\003\000" +
    "\002\036\003\000\002\037\003\000\002\037\003\000\002" +
    "\037\003\000\002\040\003\000\002\040\003\000\002\061" +
    "\004\000\002\061\004\000\002\061\004\000\002\061\004" +
    "\000\002\061\006\000\002\061\006\000\002\061\006\000" +
    "\002\061\004\000\002\061\003\000\002\062\005\000\002" +
    "\062\006\000\002\062\005\000\002\062\004\000\002\062" +
    "\006\000\002\062\003\000\002\063\005\000\002\063\003" +
    "\000\002\063\003\000\002\063\003\000\002\063\003\000" +
    "\002\063\003\000\002\063\003\000\002\063\003\000\002" +
    "\063\004\000\002\063\003\000\002\064\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\040\002\001\011\001\014\001\021\001\025" +
    "\001\032\001\034\001\035\001\036\001\042\001\074\001" +
    "\075\001\077\001\102\001\107\001\001\002\000\004\002" +
    "\u0144\001\002\000\040\002\ufffd\011\uffee\014\uffee\021\uffee" +
    "\025\uffee\032\007\034\uffee\035\uffee\036\010\042\uffee\074" +
    "\014\075\011\077\024\102\uffee\107\uffee\001\002\000\040" +
    "\002\ufff6\011\ufff6\014\ufff6\021\ufff6\025\ufff6\032\ufff6\034" +
    "\ufff6\035\ufff6\036\ufff6\042\ufff6\074\ufff6\075\ufff6\077\ufff6" +
    "\102\ufff6\107\ufff6\001\002\000\022\011\035\014\033\025" +
    "\027\034\036\035\250\036\u0138\042\040\107\032\001\002" +
    "\000\004\016\346\001\002\000\004\107\326\001\002\000" +
    "\024\011\035\014\033\021\251\025\027\034\036\035\250" +
    "\042\040\102\247\107\032\001\002\000\040\002\ufff9\011" +
    "\ufff9\014\ufff9\021\ufff9\025\ufff9\032\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\042\ufff9\074\ufff9\075\ufff9\077\ufff9\102\ufff9\107" +
    "\ufff9\001\002\000\024\011\uffef\014\uffef\021\uffef\025\uffef" +
    "\034\uffef\035\uffef\042\uffef\102\uffef\107\uffef\001\002\000" +
    "\040\002\ufffc\011\ufffc\014\ufffc\021\ufffc\025\ufffc\032\ufffc" +
    "\034\ufffc\035\ufffc\036\ufffc\042\ufffc\074\ufffc\075\ufffc\077" +
    "\ufffc\102\ufffc\107\ufffc\001\002\000\040\002\ufff7\011\ufff7" +
    "\014\ufff7\021\ufff7\025\ufff7\032\ufff7\034\ufff7\035\ufff7\036" +
    "\ufff7\042\ufff7\074\ufff7\075\ufff7\077\ufff7\102\ufff7\107\ufff7" +
    "\001\002\000\040\002\ufff5\011\ufff5\014\ufff5\021\ufff5\025" +
    "\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5\042\ufff5\074\ufff5" +
    "\075\ufff5\077\ufff5\102\ufff5\107\ufff5\001\002\000\040\002" +
    "\ufffe\011\uffee\014\uffee\021\uffee\025\uffee\032\007\034\uffee" +
    "\035\uffee\036\010\042\uffee\074\014\075\011\077\024\102" +
    "\uffee\107\uffee\001\002\000\040\002\ufffa\011\ufffa\014\ufffa" +
    "\021\ufffa\025\ufffa\032\ufffa\034\ufffa\035\ufffa\036\ufffa\042" +
    "\ufffa\074\ufffa\075\ufffa\077\ufffa\102\ufffa\107\ufffa\001\002" +
    "\000\004\002\000\001\002\000\040\002\ufff8\011\ufff8\014" +
    "\ufff8\021\ufff8\025\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8" +
    "\042\ufff8\074\ufff8\075\ufff8\077\ufff8\102\ufff8\107\ufff8\001" +
    "\002\000\020\011\035\014\033\025\027\034\036\035\034" +
    "\042\040\107\032\001\002\000\004\107\237\001\002\000" +
    "\020\004\uffdd\045\uffdd\046\uffdd\067\uffdd\073\uffdd\107\uffdd" +
    "\110\uffdd\001\002\000\004\046\uffda\001\002\000\020\004" +
    "\uffdc\045\uffdc\046\uffdc\067\uffdc\073\uffdc\107\uffdc\110\uffdc" +
    "\001\002\000\016\004\uffd2\045\066\067\uffd2\073\062\107" +
    "\uffd2\110\uffd2\001\002\000\020\004\uff4a\045\uff4a\046\uff4a" +
    "\067\uff4a\073\uff4a\107\uff4a\110\uff4a\001\002\000\020\004" +
    "\uffd5\045\uffd5\046\uffd5\067\uffd5\073\uffd5\107\uffd5\110\uffd5" +
    "\001\002\000\004\016\041\001\002\000\020\004\uffd6\045" +
    "\uffd6\046\uffd6\067\uffd6\073\uffd6\107\uffd6\110\uffd6\001\002" +
    "\000\020\004\uffd7\045\uffd7\046\uffd7\067\uffd7\073\uffd7\107" +
    "\uffd7\110\uffd7\001\002\000\020\004\uffdb\045\uffdb\046\uffdb" +
    "\067\uffdb\073\uffdb\107\uffdb\110\uffdb\001\002\000\020\004" +
    "\uffd8\045\uffd8\046\uffd8\067\uffd8\073\uffd8\107\uffd8\110\uffd8" +
    "\001\002\000\020\011\035\014\033\025\027\034\036\042" +
    "\040\101\044\107\032\001\002\000\012\004\uffd0\046\uffd0" +
    "\073\062\110\uffd0\001\002\000\006\004\045\046\uffae\001" +
    "\002\000\010\004\uffcb\046\uffcb\110\uffcb\001\002\000\006" +
    "\046\uffaf\110\uffaf\001\002\000\004\046\047\001\002\000" +
    "\022\011\035\014\033\025\027\034\036\035\034\042\040" +
    "\067\uffb3\107\032\001\002\000\006\004\045\110\uffae\001" +
    "\002\000\006\020\055\067\uffb4\001\002\000\006\020\uffb2" +
    "\067\uffb2\001\002\000\004\067\054\001\002\000\012\004" +
    "\uffe0\067\uffe0\107\uffe0\110\uffe0\001\002\000\020\011\035" +
    "\014\033\025\027\034\036\035\034\042\040\107\032\001" +
    "\002\000\006\020\uffb1\067\uffb1\001\002\000\004\110\060" +
    "\001\002\000\006\020\uffb0\067\uffb0\001\002\000\010\004" +
    "\uffcc\046\uffcc\110\uffcc\001\002\000\016\004\uffcd\046\uffcd" +
    "\067\uffcd\073\uffcd\107\uffcd\110\uffcd\001\002\000\012\004" +
    "\uffd1\046\uffd1\073\062\110\uffd1\001\002\000\016\004\uffcf" +
    "\046\uffcf\067\uffcf\073\uffcf\107\uffcf\110\uffcf\001\002\000" +
    "\016\004\uffce\046\uffce\067\uffce\073\uffce\107\uffce\110\uffce" +
    "\001\002\000\046\004\121\017\131\033\114\046\123\051" +
    "\115\052\124\056\111\057\130\062\126\063\113\071\117" +
    "\073\132\076\103\103\110\104\127\105\112\106\074\110" +
    "\120\001\002\000\012\004\uffe1\067\uffe1\107\uffe1\110\uffe1" +
    "\001\002\000\014\004\uffd4\067\uffd4\073\062\107\uffd4\110" +
    "\uffd4\001\002\000\060\004\uff75\005\uff75\010\uff75\013\uff75" +
    "\020\uff75\030\uff75\037\uff75\040\uff75\044\uff75\047\uff75\050" +
    "\uff75\051\uff75\053\204\054\uff75\060\uff75\061\uff75\062\uff75" +
    "\064\uff75\065\uff75\067\uff75\070\uff75\072\206\073\205\001" +
    "\002\000\062\004\uff73\005\uff73\007\231\010\uff73\013\uff73" +
    "\020\uff73\030\uff73\037\uff73\040\uff73\044\uff73\047\uff73\050" +
    "\uff73\051\uff73\053\uff73\054\uff73\060\uff73\061\uff73\062\uff73" +
    "\064\uff73\065\uff73\067\uff73\070\uff73\072\uff73\073\uff73\001" +
    "\002\000\052\004\uff77\005\uff77\010\uff77\013\uff77\020\uff77" +
    "\030\uff77\037\uff77\040\uff77\044\uff77\047\uff77\050\uff77\051" +
    "\200\054\uff77\060\uff77\061\uff77\062\201\064\uff77\065\uff77" +
    "\067\uff77\070\uff77\001\002\000\076\004\uff50\005\uff50\006" +
    "\uff50\007\uff50\010\uff50\013\uff50\020\uff50\026\uff50\030\uff50" +
    "\037\uff50\040\uff50\044\uff50\045\uff50\046\uff50\047\uff50\050" +
    "\uff50\051\uff50\052\uff50\053\uff50\054\uff50\060\uff50\061\uff50" +
    "\062\uff50\063\uff50\064\uff50\065\uff50\067\uff50\070\uff50\072" +
    "\uff50\073\uff50\001\002\000\046\004\uff79\005\uff79\010\uff79" +
    "\013\uff79\020\uff79\030\uff79\037\176\040\172\044\uff79\047" +
    "\174\050\173\054\uff79\060\uff79\061\uff79\064\uff79\065\uff79" +
    "\067\uff79\070\uff79\001\002\000\036\004\uff7b\005\uff7b\010" +
    "\uff7b\013\uff7b\020\uff7b\030\170\044\uff7b\054\167\060\uff7b" +
    "\061\uff7b\064\uff7b\065\uff7b\067\uff7b\070\uff7b\001\002\000" +
    "\076\004\uff55\005\uff55\006\uff55\007\uff55\010\uff55\013\uff55" +
    "\020\uff55\026\uff55\030\uff55\037\uff55\040\uff55\044\uff55\045" +
    "\uff55\046\uff55\047\uff55\050\uff55\051\uff55\052\uff55\053\uff55" +
    "\054\uff55\060\uff55\061\uff55\062\uff55\063\uff55\064\uff55\065" +
    "\uff55\067\uff55\070\uff55\072\uff55\073\uff55\001\002\000\076" +
    "\004\uff5b\005\uff5b\006\215\007\uff5b\010\uff5b\013\uff5b\020" +
    "\uff5b\026\216\030\uff5b\037\uff5b\040\uff5b\044\uff5b\045\212" +
    "\046\213\047\uff5b\050\uff5b\051\uff5b\052\124\053\uff5b\054" +
    "\uff5b\060\uff5b\061\uff5b\062\uff5b\063\113\064\uff5b\065\uff5b" +
    "\067\uff5b\070\uff5b\072\uff5b\073\uff5b\001\002\000\032\004" +
    "\164\005\uff7d\010\uff7d\013\uff7d\020\uff7d\044\uff7d\060\uff7d" +
    "\061\uff7d\064\uff7d\065\uff7d\067\uff7d\070\uff7d\001\002\000" +
    "\030\005\uff7f\010\uff7f\013\162\020\uff7f\044\uff7f\060\uff7f" +
    "\061\uff7f\064\uff7f\065\uff7f\067\uff7f\070\uff7f\001\002\000" +
    "\076\004\uff4f\005\uff4f\006\uff4f\007\uff4f\010\uff4f\013\uff4f" +
    "\020\uff4f\026\uff4f\030\uff4f\037\uff4f\040\uff4f\044\uff4f\045" +
    "\uff4f\046\uff4f\047\uff4f\050\uff4f\051\uff4f\052\uff4f\053\uff4f" +
    "\054\uff4f\060\uff4f\061\uff4f\062\uff4f\063\uff4f\064\uff4f\065" +
    "\uff4f\067\uff4f\070\uff4f\072\uff4f\073\uff4f\001\002\000\004" +
    "\065\211\001\002\000\026\005\uff81\010\160\020\uff81\044" +
    "\uff81\060\uff81\061\uff81\064\uff81\065\uff81\067\uff81\070\uff81" +
    "\001\002\000\024\005\156\020\uff83\044\uff83\060\uff83\061" +
    "\uff83\064\uff83\065\uff83\067\uff83\070\uff83\001\002\000\022" +
    "\020\uff85\044\uff85\060\153\061\uff85\064\uff85\065\uff85\067" +
    "\uff85\070\uff85\001\002\000\076\004\uff51\005\uff51\006\uff51" +
    "\007\uff51\010\uff51\013\uff51\020\uff51\026\uff51\030\uff51\037" +
    "\uff51\040\uff51\044\uff51\045\uff51\046\uff51\047\uff51\050\uff51" +
    "\051\uff51\052\uff51\053\uff51\054\uff51\060\uff51\061\uff51\062" +
    "\uff51\063\uff51\064\uff51\065\uff51\067\uff51\070\uff51\072\uff51" +
    "\073\uff51\001\002\000\046\004\121\017\131\033\114\046" +
    "\123\051\115\052\124\056\111\057\130\062\126\063\113" +
    "\071\117\073\132\076\103\103\110\104\127\105\112\106" +
    "\074\110\120\001\002\000\076\004\uff53\005\uff53\006\uff53" +
    "\007\uff53\010\uff53\013\uff53\020\uff53\026\uff53\030\uff53\037" +
    "\uff53\040\uff53\044\uff53\045\uff53\046\uff53\047\uff53\050\uff53" +
    "\051\uff53\052\uff53\053\uff53\054\uff53\060\uff53\061\uff53\062" +
    "\uff53\063\uff53\064\uff53\065\uff53\067\uff53\070\uff53\072\uff53" +
    "\073\uff53\001\002\000\124\004\uff65\005\uff65\006\uff65\007" +
    "\uff65\010\uff65\013\uff65\017\uff65\020\uff65\026\uff65\030\uff65" +
    "\033\uff65\037\uff65\040\uff65\044\uff65\045\uff65\046\uff65\047" +
    "\uff65\050\uff65\051\uff65\052\uff65\053\uff65\054\uff65\056\uff65" +
    "\057\uff65\060\uff65\061\uff65\062\uff65\063\uff65\064\uff65\065" +
    "\uff65\067\uff65\070\uff65\071\uff65\072\uff65\073\uff65\076\uff65" +
    "\103\uff65\104\uff65\105\uff65\106\uff65\110\uff65\001\002\000" +
    "\076\004\uff4e\005\uff4e\006\uff4e\007\uff4e\010\uff4e\013\uff4e" +
    "\020\uff4e\026\uff4e\030\uff4e\037\uff4e\040\uff4e\044\uff4e\045" +
    "\uff4e\046\uff4e\047\uff4e\050\uff4e\051\uff4e\052\uff4e\053\uff4e" +
    "\054\uff4e\060\uff4e\061\uff4e\062\uff4e\063\uff4e\064\uff4e\065" +
    "\uff4e\067\uff4e\070\uff4e\072\uff4e\073\uff4e\001\002\000\046" +
    "\004\uff6f\017\uff6f\033\uff6f\046\uff6f\051\uff6f\052\uff6f\056" +
    "\uff6f\057\uff6f\062\uff6f\063\uff6f\071\uff6f\073\uff6f\076\uff6f" +
    "\103\uff6f\104\uff6f\105\uff6f\106\uff6f\110\uff6f\001\002\000" +
    "\010\020\uff8b\065\uff8b\070\uff8b\001\002\000\004\046\145" +
    "\001\002\000\076\004\uff4b\005\uff4b\006\uff4b\007\uff4b\010" +
    "\uff4b\013\uff4b\020\uff4b\026\uff4b\030\uff4b\037\uff4b\040\uff4b" +
    "\044\uff4b\045\uff4b\046\uff4b\047\uff4b\050\uff4b\051\uff4b\052" +
    "\uff4b\053\uff4b\054\uff4b\060\uff4b\061\uff4b\062\uff4b\063\uff4b" +
    "\064\uff4b\065\uff4b\067\uff4b\070\uff4b\072\uff4b\073\uff4b\001" +
    "\002\000\046\004\121\017\131\033\114\046\123\051\115" +
    "\052\124\056\111\057\130\062\126\063\113\071\117\073" +
    "\132\076\103\103\110\104\127\105\112\106\074\110\120" +
    "\001\002\000\046\004\121\017\131\033\114\046\123\051" +
    "\115\052\124\056\111\057\130\062\126\063\113\071\117" +
    "\073\132\076\103\103\110\104\127\105\112\106\074\110" +
    "\120\001\002\000\064\004\121\011\035\014\033\017\131" +
    "\025\027\033\114\034\036\035\034\042\040\046\123\051" +
    "\115\052\124\056\111\057\130\062\126\063\113\071\117" +
    "\073\132\076\103\103\110\104\127\105\112\106\074\107" +
    "\032\110\120\001\002\000\124\004\uff64\005\uff64\006\uff64" +
    "\007\uff64\010\uff64\013\uff64\017\uff64\020\uff64\026\uff64\030" +
    "\uff64\033\uff64\037\uff64\040\uff64\044\uff64\045\uff64\046\uff64" +
    "\047\uff64\050\uff64\051\uff64\052\uff64\053\uff64\054\uff64\056" +
    "\uff64\057\uff64\060\uff64\061\uff64\062\uff64\063\uff64\064\uff64" +
    "\065\uff64\067\uff64\070\uff64\071\uff64\072\uff64\073\uff64\076" +
    "\uff64\103\uff64\104\uff64\105\uff64\106\uff64\110\uff64\001\002" +
    "\000\046\004\121\017\131\033\114\046\123\051\115\052" +
    "\124\056\111\057\130\062\126\063\113\071\117\073\132" +
    "\076\103\103\110\104\127\105\112\106\074\110\120\001" +
    "\002\000\046\004\uff70\017\uff70\033\uff70\046\uff70\051\uff70" +
    "\052\uff70\056\uff70\057\uff70\062\uff70\063\uff70\071\uff70\073" +
    "\uff70\076\uff70\103\uff70\104\uff70\105\uff70\106\uff70\110\uff70" +
    "\001\002\000\076\004\uff52\005\uff52\006\uff52\007\uff52\010" +
    "\uff52\013\uff52\020\uff52\026\uff52\030\uff52\037\uff52\040\uff52" +
    "\044\uff52\045\uff52\046\uff52\047\uff52\050\uff52\051\uff52\052" +
    "\uff52\053\uff52\054\uff52\060\uff52\061\uff52\062\uff52\063\uff52" +
    "\064\uff52\065\uff52\067\uff52\070\uff52\072\uff52\073\uff52\001" +
    "\002\000\076\004\uff4d\005\uff4d\006\uff4d\007\uff4d\010\uff4d" +
    "\013\uff4d\020\uff4d\026\uff4d\030\uff4d\037\uff4d\040\uff4d\044" +
    "\uff4d\045\uff4d\046\uff4d\047\uff4d\050\uff4d\051\uff4d\052\uff4d" +
    "\053\uff4d\054\uff4d\060\uff4d\061\uff4d\062\uff4d\063\uff4d\064" +
    "\uff4d\065\uff4d\067\uff4d\070\uff4d\072\uff4d\073\uff4d\001\002" +
    "\000\004\110\134\001\002\000\046\004\121\017\131\033" +
    "\114\046\123\051\115\052\124\056\111\057\130\062\126" +
    "\063\113\071\117\073\132\076\103\103\110\104\127\105" +
    "\112\106\074\110\120\001\002\000\062\004\uff63\005\uff63" +
    "\007\uff63\010\uff63\013\uff63\020\uff63\030\uff63\037\uff63\040" +
    "\uff63\044\uff63\047\uff63\050\uff63\051\uff63\053\uff63\054\uff63" +
    "\060\uff63\061\uff63\062\uff63\064\uff63\065\uff63\067\uff63\070" +
    "\uff63\072\uff63\073\uff63\001\002\000\076\004\uff4c\005\uff4c" +
    "\006\uff4c\007\uff4c\010\uff4c\013\uff4c\020\uff4c\026\uff4c\030" +
    "\uff4c\037\uff4c\040\uff4c\044\uff4c\045\uff4c\046\uff4c\047\uff4c" +
    "\050\uff4c\051\uff4c\052\uff4c\053\uff4c\054\uff4c\060\uff4c\061" +
    "\uff4c\062\uff4c\063\uff4c\064\uff4c\065\uff4c\067\uff4c\070\uff4c" +
    "\072\uff4c\073\uff4c\001\002\000\062\004\uff61\005\uff61\007" +
    "\uff61\010\uff61\013\uff61\020\uff61\030\uff61\037\uff61\040\uff61" +
    "\044\uff61\047\uff61\050\uff61\051\uff61\053\uff61\054\uff61\060" +
    "\uff61\061\uff61\062\uff61\064\uff61\065\uff61\067\uff61\070\uff61" +
    "\072\uff61\073\uff61\001\002\000\004\067\142\001\002\000" +
    "\004\067\140\001\002\000\046\004\121\017\131\033\114" +
    "\046\123\051\115\052\124\056\111\057\130\062\126\063" +
    "\113\071\117\073\132\076\103\103\110\104\127\105\112" +
    "\106\074\110\120\001\002\000\062\004\uff5d\005\uff5d\007" +
    "\uff5d\010\uff5d\013\uff5d\020\uff5d\030\uff5d\037\uff5d\040\uff5d" +
    "\044\uff5d\047\uff5d\050\uff5d\051\uff5d\053\uff5d\054\uff5d\060" +
    "\uff5d\061\uff5d\062\uff5d\064\uff5d\065\uff5d\067\uff5d\070\uff5d" +
    "\072\uff5d\073\uff5d\001\002\000\076\004\uff54\005\uff54\006" +
    "\uff54\007\uff54\010\uff54\013\uff54\020\uff54\026\uff54\030\uff54" +
    "\037\uff54\040\uff54\044\uff54\045\uff54\046\uff54\047\uff54\050" +
    "\uff54\051\uff54\052\uff54\053\uff54\054\uff54\060\uff54\061\uff54" +
    "\062\uff54\063\uff54\064\uff54\065\uff54\067\uff54\070\uff54\072" +
    "\uff54\073\uff54\001\002\000\062\004\uff5c\005\uff5c\007\uff5c" +
    "\010\uff5c\013\uff5c\020\uff5c\030\uff5c\037\uff5c\040\uff5c\044" +
    "\uff5c\047\uff5c\050\uff5c\051\uff5c\053\uff5c\054\uff5c\060\uff5c" +
    "\061\uff5c\062\uff5c\064\uff5c\065\uff5c\067\uff5c\070\uff5c\072" +
    "\uff5c\073\uff5c\001\002\000\062\004\uff62\005\uff62\007\uff62" +
    "\010\uff62\013\uff62\020\uff62\030\uff62\037\uff62\040\uff62\044" +
    "\uff62\047\uff62\050\uff62\051\uff62\053\uff62\054\uff62\060\uff62" +
    "\061\uff62\062\uff62\064\uff62\065\uff62\067\uff62\070\uff62\072" +
    "\uff62\073\uff62\001\002\000\064\004\121\011\035\014\033" +
    "\017\131\025\027\033\114\034\036\035\034\042\040\046" +
    "\123\051\115\052\124\056\111\057\130\062\126\063\113" +
    "\071\117\073\132\076\103\103\110\104\127\105\112\106" +
    "\074\107\032\110\120\001\002\000\004\067\151\001\002" +
    "\000\004\067\150\001\002\000\062\004\uff5e\005\uff5e\007" +
    "\uff5e\010\uff5e\013\uff5e\020\uff5e\030\uff5e\037\uff5e\040\uff5e" +
    "\044\uff5e\047\uff5e\050\uff5e\051\uff5e\053\uff5e\054\uff5e\060" +
    "\uff5e\061\uff5e\062\uff5e\064\uff5e\065\uff5e\067\uff5e\070\uff5e" +
    "\072\uff5e\073\uff5e\001\002\000\062\004\uff5f\005\uff5f\007" +
    "\uff5f\010\uff5f\013\uff5f\020\uff5f\030\uff5f\037\uff5f\040\uff5f" +
    "\044\uff5f\047\uff5f\050\uff5f\051\uff5f\053\uff5f\054\uff5f\060" +
    "\uff5f\061\uff5f\062\uff5f\064\uff5f\065\uff5f\067\uff5f\070\uff5f" +
    "\072\uff5f\073\uff5f\001\002\000\062\004\uff60\005\uff60\007" +
    "\uff60\010\uff60\013\uff60\020\uff60\030\uff60\037\uff60\040\uff60" +
    "\044\uff60\047\uff60\050\uff60\051\uff60\053\uff60\054\uff60\060" +
    "\uff60\061\uff60\062\uff60\064\uff60\065\uff60\067\uff60\070\uff60" +
    "\072\uff60\073\uff60\001\002\000\046\004\121\017\131\033" +
    "\114\046\123\051\115\052\124\056\111\057\130\062\126" +
    "\063\113\071\117\073\132\076\103\103\110\104\127\105" +
    "\112\106\074\110\120\001\002\000\060\004\uff73\005\uff73" +
    "\010\uff73\013\uff73\020\uff73\030\uff73\037\uff73\040\uff73\044" +
    "\uff73\047\uff73\050\uff73\051\uff73\053\uff73\054\uff73\060\uff73" +
    "\061\uff73\062\uff73\064\uff73\065\uff73\067\uff73\070\uff73\072" +
    "\uff73\073\uff73\001\002\000\024\005\156\020\uff84\044\uff84" +
    "\060\uff84\061\uff84\064\uff84\065\uff84\067\uff84\070\uff84\001" +
    "\002\000\046\004\121\017\131\033\114\046\123\051\115" +
    "\052\124\056\111\057\130\062\126\063\113\071\117\073" +
    "\132\076\103\103\110\104\127\105\112\106\074\110\120" +
    "\001\002\000\026\005\uff82\010\160\020\uff82\044\uff82\060" +
    "\uff82\061\uff82\064\uff82\065\uff82\067\uff82\070\uff82\001\002" +
    "\000\046\004\121\017\131\033\114\046\123\051\115\052" +
    "\124\056\111\057\130\062\126\063\113\071\117\073\132" +
    "\076\103\103\110\104\127\105\112\106\074\110\120\001" +
    "\002\000\030\005\uff80\010\uff80\013\162\020\uff80\044\uff80" +
    "\060\uff80\061\uff80\064\uff80\065\uff80\067\uff80\070\uff80\001" +
    "\002\000\046\004\121\017\131\033\114\046\123\051\115" +
    "\052\124\056\111\057\130\062\126\063\113\071\117\073" +
    "\132\076\103\103\110\104\127\105\112\106\074\110\120" +
    "\001\002\000\032\004\164\005\uff7e\010\uff7e\013\uff7e\020" +
    "\uff7e\044\uff7e\060\uff7e\061\uff7e\064\uff7e\065\uff7e\067\uff7e" +
    "\070\uff7e\001\002\000\046\004\121\017\131\033\114\046" +
    "\123\051\115\052\124\056\111\057\130\062\126\063\113" +
    "\071\117\073\132\076\103\103\110\104\127\105\112\106" +
    "\074\110\120\001\002\000\036\004\uff7c\005\uff7c\010\uff7c" +
    "\013\uff7c\020\uff7c\030\170\044\uff7c\054\167\060\uff7c\061" +
    "\uff7c\064\uff7c\065\uff7c\067\uff7c\070\uff7c\001\002\000\046" +
    "\004\121\017\131\033\114\046\123\051\115\052\124\056" +
    "\111\057\130\062\126\063\113\071\117\073\132\076\103" +
    "\103\110\104\127\105\112\106\074\110\120\001\002\000" +
    "\046\004\uff71\017\uff71\033\uff71\046\uff71\051\uff71\052\uff71" +
    "\056\uff71\057\uff71\062\uff71\063\uff71\071\uff71\073\uff71\076" +
    "\uff71\103\uff71\104\uff71\105\uff71\106\uff71\110\uff71\001\002" +
    "\000\046\004\uff72\017\uff72\033\uff72\046\uff72\051\uff72\052" +
    "\uff72\056\uff72\057\uff72\062\uff72\063\uff72\071\uff72\073\uff72" +
    "\076\uff72\103\uff72\104\uff72\105\uff72\106\uff72\110\uff72\001" +
    "\002\000\046\004\uff7a\005\uff7a\010\uff7a\013\uff7a\020\uff7a" +
    "\030\uff7a\037\176\040\172\044\uff7a\047\174\050\173\054" +
    "\uff7a\060\uff7a\061\uff7a\064\uff7a\065\uff7a\067\uff7a\070\uff7a" +
    "\001\002\000\046\004\uff6b\017\uff6b\033\uff6b\046\uff6b\051" +
    "\uff6b\052\uff6b\056\uff6b\057\uff6b\062\uff6b\063\uff6b\071\uff6b" +
    "\073\uff6b\076\uff6b\103\uff6b\104\uff6b\105\uff6b\106\uff6b\110" +
    "\uff6b\001\002\000\046\004\uff6c\017\uff6c\033\uff6c\046\uff6c" +
    "\051\uff6c\052\uff6c\056\uff6c\057\uff6c\062\uff6c\063\uff6c\071" +
    "\uff6c\073\uff6c\076\uff6c\103\uff6c\104\uff6c\105\uff6c\106\uff6c" +
    "\110\uff6c\001\002\000\046\004\uff6e\017\uff6e\033\uff6e\046" +
    "\uff6e\051\uff6e\052\uff6e\056\uff6e\057\uff6e\062\uff6e\063\uff6e" +
    "\071\uff6e\073\uff6e\076\uff6e\103\uff6e\104\uff6e\105\uff6e\106" +
    "\uff6e\110\uff6e\001\002\000\046\004\121\017\131\033\114" +
    "\046\123\051\115\052\124\056\111\057\130\062\126\063" +
    "\113\071\117\073\132\076\103\103\110\104\127\105\112" +
    "\106\074\110\120\001\002\000\046\004\uff6d\017\uff6d\033" +
    "\uff6d\046\uff6d\051\uff6d\052\uff6d\056\uff6d\057\uff6d\062\uff6d" +
    "\063\uff6d\071\uff6d\073\uff6d\076\uff6d\103\uff6d\104\uff6d\105" +
    "\uff6d\106\uff6d\110\uff6d\001\002\000\052\004\uff78\005\uff78" +
    "\010\uff78\013\uff78\020\uff78\030\uff78\037\uff78\040\uff78\044" +
    "\uff78\047\uff78\050\uff78\051\200\054\uff78\060\uff78\061\uff78" +
    "\062\201\064\uff78\065\uff78\067\uff78\070\uff78\001\002\000" +
    "\046\004\uff69\017\uff69\033\uff69\046\uff69\051\uff69\052\uff69" +
    "\056\uff69\057\uff69\062\uff69\063\uff69\071\uff69\073\uff69\076" +
    "\uff69\103\uff69\104\uff69\105\uff69\106\uff69\110\uff69\001\002" +
    "\000\046\004\uff6a\017\uff6a\033\uff6a\046\uff6a\051\uff6a\052" +
    "\uff6a\056\uff6a\057\uff6a\062\uff6a\063\uff6a\071\uff6a\073\uff6a" +
    "\076\uff6a\103\uff6a\104\uff6a\105\uff6a\106\uff6a\110\uff6a\001" +
    "\002\000\046\004\121\017\131\033\114\046\123\051\115" +
    "\052\124\056\111\057\130\062\126\063\113\071\117\073" +
    "\132\076\103\103\110\104\127\105\112\106\074\110\120" +
    "\001\002\000\060\004\uff76\005\uff76\010\uff76\013\uff76\020" +
    "\uff76\030\uff76\037\uff76\040\uff76\044\uff76\047\uff76\050\uff76" +
    "\051\uff76\053\204\054\uff76\060\uff76\061\uff76\062\uff76\064" +
    "\uff76\065\uff76\067\uff76\070\uff76\072\206\073\205\001\002" +
    "\000\046\004\uff66\017\uff66\033\uff66\046\uff66\051\uff66\052" +
    "\uff66\056\uff66\057\uff66\062\uff66\063\uff66\071\uff66\073\uff66" +
    "\076\uff66\103\uff66\104\uff66\105\uff66\106\uff66\110\uff66\001" +
    "\002\000\046\004\uff68\017\uff68\033\uff68\046\uff68\051\uff68" +
    "\052\uff68\056\uff68\057\uff68\062\uff68\063\uff68\071\uff68\073" +
    "\uff68\076\uff68\103\uff68\104\uff68\105\uff68\106\uff68\110\uff68" +
    "\001\002\000\046\004\uff67\017\uff67\033\uff67\046\uff67\051" +
    "\uff67\052\uff67\056\uff67\057\uff67\062\uff67\063\uff67\071\uff67" +
    "\073\uff67\076\uff67\103\uff67\104\uff67\105\uff67\106\uff67\110" +
    "\uff67\001\002\000\046\004\121\017\131\033\114\046\123" +
    "\051\115\052\124\056\111\057\130\062\126\063\113\071" +
    "\117\073\132\076\103\103\110\104\127\105\112\106\074" +
    "\110\120\001\002\000\060\004\uff74\005\uff74\010\uff74\013" +
    "\uff74\020\uff74\030\uff74\037\uff74\040\uff74\044\uff74\047\uff74" +
    "\050\uff74\051\uff74\053\uff74\054\uff74\060\uff74\061\uff74\062" +
    "\uff74\064\uff74\065\uff74\067\uff74\070\uff74\072\uff74\073\uff74" +
    "\001\002\000\012\004\uffd3\067\uffd3\107\uffd3\110\uffd3\001" +
    "\002\000\046\004\121\017\131\033\114\046\123\051\115" +
    "\052\124\056\111\057\130\062\126\063\113\071\117\073" +
    "\132\076\103\103\110\104\127\105\112\106\074\110\120" +
    "\001\002\000\050\004\121\017\131\033\114\046\123\051" +
    "\115\052\124\056\111\057\130\062\126\063\113\067\uff89" +
    "\071\117\073\132\076\103\103\110\104\127\105\112\106" +
    "\074\110\120\001\002\000\076\004\uff57\005\uff57\006\uff57" +
    "\007\uff57\010\uff57\013\uff57\020\uff57\026\uff57\030\uff57\037" +
    "\uff57\040\uff57\044\uff57\045\uff57\046\uff57\047\uff57\050\uff57" +
    "\051\uff57\052\uff57\053\uff57\054\uff57\060\uff57\061\uff57\062" +
    "\uff57\063\uff57\064\uff57\065\uff57\067\uff57\070\uff57\072\uff57" +
    "\073\uff57\001\002\000\004\110\220\001\002\000\004\110" +
    "\217\001\002\000\076\004\uff5a\005\uff5a\006\uff5a\007\uff5a" +
    "\010\uff5a\013\uff5a\020\uff5a\026\uff5a\030\uff5a\037\uff5a\040" +
    "\uff5a\044\uff5a\045\uff5a\046\uff5a\047\uff5a\050\uff5a\051\uff5a" +
    "\052\uff5a\053\uff5a\054\uff5a\060\uff5a\061\uff5a\062\uff5a\063" +
    "\uff5a\064\uff5a\065\uff5a\067\uff5a\070\uff5a\072\uff5a\073\uff5a" +
    "\001\002\000\076\004\uff58\005\uff58\006\uff58\007\uff58\010" +
    "\uff58\013\uff58\020\uff58\026\uff58\030\uff58\037\uff58\040\uff58" +
    "\044\uff58\045\uff58\046\uff58\047\uff58\050\uff58\051\uff58\052" +
    "\uff58\053\uff58\054\uff58\060\uff58\061\uff58\062\uff58\063\uff58" +
    "\064\uff58\065\uff58\067\uff58\070\uff58\072\uff58\073\uff58\001" +
    "\002\000\006\020\uff88\067\uff88\001\002\000\006\020\225" +
    "\067\uff8a\001\002\000\004\067\224\001\002\000\076\004" +
    "\uff56\005\uff56\006\uff56\007\uff56\010\uff56\013\uff56\020\uff56" +
    "\026\uff56\030\uff56\037\uff56\040\uff56\044\uff56\045\uff56\046" +
    "\uff56\047\uff56\050\uff56\051\uff56\052\uff56\053\uff56\054\uff56" +
    "\060\uff56\061\uff56\062\uff56\063\uff56\064\uff56\065\uff56\067" +
    "\uff56\070\uff56\072\uff56\073\uff56\001\002\000\046\004\121" +
    "\017\131\033\114\046\123\051\115\052\124\056\111\057" +
    "\130\062\126\063\113\071\117\073\132\076\103\103\110" +
    "\104\127\105\112\106\074\110\120\001\002\000\006\020" +
    "\uff87\067\uff87\001\002\000\004\065\230\001\002\000\076" +
    "\004\uff59\005\uff59\006\uff59\007\uff59\010\uff59\013\uff59\020" +
    "\uff59\026\uff59\030\uff59\037\uff59\040\uff59\044\uff59\045\uff59" +
    "\046\uff59\047\uff59\050\uff59\051\uff59\052\uff59\053\uff59\054" +
    "\uff59\060\uff59\061\uff59\062\uff59\063\uff59\064\uff59\065\uff59" +
    "\067\uff59\070\uff59\072\uff59\073\uff59\001\002\000\046\004" +
    "\121\017\131\033\114\046\123\051\115\052\124\056\111" +
    "\057\130\062\126\063\113\071\117\073\132\076\103\103" +
    "\110\104\127\105\112\106\074\110\120\001\002\000\020" +
    "\020\uff86\044\uff86\061\uff86\064\uff86\065\uff86\067\uff86\070" +
    "\uff86\001\002\000\004\046\234\001\002\000\046\004\121" +
    "\017\131\033\114\046\123\051\115\052\124\056\111\057" +
    "\130\062\126\063\113\071\117\073\132\076\103\103\110" +
    "\104\127\105\112\106\074\110\120\001\002\000\004\067" +
    "\236\001\002\000\020\004\uffd9\045\uffd9\046\uffd9\067\uffd9" +
    "\073\uffd9\107\uffd9\110\uffd9\001\002\000\006\020\uffab\070" +
    "\uffab\001\002\000\006\020\241\070\242\001\002\000\004" +
    "\107\243\001\002\000\134\002\uffed\004\uffed\011\uffed\012" +
    "\uffed\014\uffed\015\uffed\017\uffed\021\uffed\022\uffed\023\uffed" +
    "\024\uffed\025\uffed\031\uffed\032\uffed\033\uffed\034\uffed\035" +
    "\uffed\036\uffed\041\uffed\042\uffed\044\uffed\046\uffed\051\uffed" +
    "\052\uffed\055\uffed\056\uffed\057\uffed\062\uffed\063\uffed\064" +
    "\uffed\066\uffed\071\uffed\073\uffed\074\uffed\075\uffed\076\uffed" +
    "\077\uffed\100\uffed\102\uffed\103\uffed\104\uffed\105\uffed\106" +
    "\uffed\107\uffed\110\uffed\001\002\000\006\020\uffaa\070\uffaa" +
    "\001\002\000\040\002\ufffb\011\ufffb\014\ufffb\021\ufffb\025" +
    "\ufffb\032\ufffb\034\ufffb\035\ufffb\036\ufffb\042\ufffb\074\ufffb" +
    "\075\ufffb\077\ufffb\102\ufffb\107\ufffb\001\002\000\010\045" +
    "\066\073\062\110\uffd2\001\002\000\010\045\uffdf\073\uffdf" +
    "\110\uffdf\001\002\000\004\110\301\001\002\000\004\016" +
    "\273\001\002\000\022\011\035\014\033\025\027\034\036" +
    "\035\250\042\040\102\253\107\032\001\002\000\010\045" +
    "\066\073\062\110\uffd2\001\002\000\004\110\254\001\002" +
    "\000\004\007\255\001\002\000\046\004\121\017\131\033" +
    "\114\046\123\051\115\052\124\056\111\057\130\062\126" +
    "\063\113\071\117\073\132\076\103\103\110\104\127\105" +
    "\112\106\074\110\120\001\002\000\004\070\257\001\002" +
    "\000\134\002\ufff0\004\ufff0\011\ufff0\012\ufff0\014\ufff0\015" +
    "\ufff0\017\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\031\ufff0\032\ufff0\033\ufff0\034\ufff0\035\ufff0\036\ufff0\041" +
    "\ufff0\042\ufff0\044\ufff0\046\ufff0\051\ufff0\052\ufff0\055\ufff0" +
    "\056\ufff0\057\ufff0\062\ufff0\063\ufff0\064\ufff0\066\ufff0\071" +
    "\ufff0\073\ufff0\074\ufff0\075\ufff0\076\ufff0\077\ufff0\100\ufff0" +
    "\102\ufff0\103\ufff0\104\ufff0\105\ufff0\106\ufff0\107\ufff0\110" +
    "\ufff0\001\002\000\004\110\270\001\002\000\006\020\262" +
    "\070\263\001\002\000\010\045\066\073\062\110\uffd2\001" +
    "\002\000\134\002\ufff1\004\ufff1\011\ufff1\012\ufff1\014\ufff1" +
    "\015\ufff1\017\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1\025" +
    "\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\036\ufff1" +
    "\041\ufff1\042\ufff1\044\ufff1\046\ufff1\051\ufff1\052\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\062\ufff1\063\ufff1\064\ufff1\066\ufff1" +
    "\071\ufff1\073\ufff1\074\ufff1\075\ufff1\076\ufff1\077\ufff1\100" +
    "\ufff1\102\ufff1\103\ufff1\104\ufff1\105\ufff1\106\ufff1\107\ufff1" +
    "\110\ufff1\001\002\000\004\110\265\001\002\000\004\007" +
    "\266\001\002\000\046\004\121\017\131\033\114\046\123" +
    "\051\115\052\124\056\111\057\130\062\126\063\113\071" +
    "\117\073\132\076\103\103\110\104\127\105\112\106\074" +
    "\110\120\001\002\000\006\020\uffa6\070\uffa6\001\002\000" +
    "\004\007\271\001\002\000\046\004\121\017\131\033\114" +
    "\046\123\051\115\052\124\056\111\057\130\062\126\063" +
    "\113\071\117\073\132\076\103\103\110\104\127\105\112" +
    "\106\074\110\120\001\002\000\006\020\uffa7\070\uffa7\001" +
    "\002\000\020\011\035\014\033\025\027\034\036\042\040" +
    "\101\044\107\032\001\002\000\006\004\045\046\uffae\001" +
    "\002\000\004\046\276\001\002\000\022\011\035\014\033" +
    "\025\027\034\036\035\034\042\040\067\uffb3\107\032\001" +
    "\002\000\004\067\300\001\002\000\010\045\uffde\073\uffde" +
    "\110\uffde\001\002\000\004\007\302\001\002\000\046\004" +
    "\121\017\131\033\114\046\123\051\115\052\124\056\111" +
    "\057\130\062\126\063\113\071\117\073\132\076\103\103" +
    "\110\104\127\105\112\106\074\110\120\001\002\000\004" +
    "\070\304\001\002\000\134\002\ufff2\004\ufff2\011\ufff2\012" +
    "\ufff2\014\ufff2\015\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\031\ufff2\032\ufff2\033\ufff2\034\ufff2\035" +
    "\ufff2\036\ufff2\041\ufff2\042\ufff2\044\ufff2\046\ufff2\051\ufff2" +
    "\052\ufff2\055\ufff2\056\ufff2\057\ufff2\062\ufff2\063\ufff2\064" +
    "\ufff2\066\ufff2\071\ufff2\073\ufff2\074\ufff2\075\ufff2\076\ufff2" +
    "\077\ufff2\100\ufff2\102\ufff2\103\ufff2\104\ufff2\105\ufff2\106" +
    "\ufff2\107\ufff2\110\ufff2\001\002\000\004\110\324\001\002" +
    "\000\006\020\307\070\310\001\002\000\010\045\066\073" +
    "\062\110\uffd2\001\002\000\134\002\ufff3\004\ufff3\011\ufff3" +
    "\012\ufff3\014\ufff3\015\ufff3\017\ufff3\021\ufff3\022\ufff3\023" +
    "\ufff3\024\ufff3\025\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3" +
    "\035\ufff3\036\ufff3\041\ufff3\042\ufff3\044\ufff3\046\ufff3\051" +
    "\ufff3\052\ufff3\055\ufff3\056\ufff3\057\ufff3\062\ufff3\063\ufff3" +
    "\064\ufff3\066\ufff3\071\ufff3\073\ufff3\074\ufff3\075\ufff3\076" +
    "\ufff3\077\ufff3\100\ufff3\102\ufff3\103\ufff3\104\ufff3\105\ufff3" +
    "\106\ufff3\107\ufff3\110\ufff3\001\002\000\004\110\312\001" +
    "\002\000\010\007\314\020\uffa3\070\uffa3\001\002\000\006" +
    "\020\uffa8\070\uffa8\001\002\000\050\004\121\017\131\033" +
    "\114\044\316\046\123\051\115\052\124\056\111\057\130" +
    "\062\126\063\113\071\117\073\132\076\103\103\110\104" +
    "\127\105\112\106\074\110\120\001\002\000\006\020\uffa5" +
    "\070\uffa5\001\002\000\046\004\121\017\131\033\114\046" +
    "\123\051\115\052\124\056\111\057\130\062\126\063\113" +
    "\071\117\073\132\076\103\103\110\104\127\105\112\106" +
    "\074\110\120\001\002\000\006\020\uffa2\064\uffa2\001\002" +
    "\000\006\020\322\064\321\001\002\000\006\020\uffa4\070" +
    "\uffa4\001\002\000\046\004\121\017\131\033\114\046\123" +
    "\051\115\052\124\056\111\057\130\062\126\063\113\071" +
    "\117\073\132\076\103\103\110\104\127\105\112\106\074" +
    "\110\120\001\002\000\006\020\uffa1\064\uffa1\001\002\000" +
    "\010\007\314\020\uffa3\070\uffa3\001\002\000\006\020\uffa9" +
    "\070\uffa9\001\002\000\004\044\327\001\002\000\020\011" +
    "\uffec\014\uffec\025\uffec\034\uffec\035\uffec\042\uffec\107\uffec" +
    "\001\002\000\020\011\035\014\033\025\027\034\036\035" +
    "\250\042\040\107\032\001\002\000\010\045\066\073\062" +
    "\110\uffd2\001\002\000\022\011\035\014\033\025\027\034" +
    "\036\035\250\042\040\064\334\107\032\001\002\000\022" +
    "\011\uffea\014\uffea\025\uffea\034\uffea\035\uffea\042\uffea\064" +
    "\uffea\107\uffea\001\002\000\004\070\336\001\002\000\022" +
    "\011\uffe9\014\uffe9\025\uffe9\034\uffe9\035\uffe9\042\uffe9\064" +
    "\uffe9\107\uffe9\001\002\000\134\002\uffeb\004\uffeb\011\uffeb" +
    "\012\uffeb\014\uffeb\015\uffeb\017\uffeb\021\uffeb\022\uffeb\023" +
    "\uffeb\024\uffeb\025\uffeb\031\uffeb\032\uffeb\033\uffeb\034\uffeb" +
    "\035\uffeb\036\uffeb\041\uffeb\042\uffeb\044\uffeb\046\uffeb\051" +
    "\uffeb\052\uffeb\055\uffeb\056\uffeb\057\uffeb\062\uffeb\063\uffeb" +
    "\064\uffeb\066\uffeb\071\uffeb\073\uffeb\074\uffeb\075\uffeb\076" +
    "\uffeb\077\uffeb\100\uffeb\102\uffeb\103\uffeb\104\uffeb\105\uffeb" +
    "\106\uffeb\107\uffeb\110\uffeb\001\002\000\004\110\345\001" +
    "\002\000\006\020\341\070\342\001\002\000\010\045\066" +
    "\073\062\110\uffd2\001\002\000\022\011\uffe8\014\uffe8\025" +
    "\uffe8\034\uffe8\035\uffe8\042\uffe8\064\uffe8\107\uffe8\001\002" +
    "\000\004\110\344\001\002\000\006\020\uffac\070\uffac\001" +
    "\002\000\006\020\uffad\070\uffad\001\002\000\020\011\035" +
    "\014\033\025\027\034\036\042\040\101\044\107\032\001" +
    "\002\000\006\004\045\110\uffae\001\002\000\004\110\351" +
    "\001\002\000\004\046\uffe7\001\002\000\004\046\353\001" +
    "\002\000\022\011\035\014\033\025\027\034\036\035\034" +
    "\042\040\067\uffb3\107\032\001\002\000\004\067\355\001" +
    "\002\000\004\044\uffe6\001\002\000\004\044\357\001\002" +
    "\000\126\004\121\011\uffee\012\u0107\014\uffee\015\377\017" +
    "\131\021\uffee\022\364\023\365\024\363\025\uffee\031\u0104" +
    "\033\114\034\uffee\035\uffee\041\u010b\042\uffee\044\372\046" +
    "\123\051\115\052\124\055\373\056\111\057\130\062\126" +
    "\063\113\064\uffc6\066\367\071\117\073\132\074\014\075" +
    "\011\076\103\077\024\100\362\102\uffee\103\110\104\127" +
    "\105\112\106\074\107\uffee\110\120\001\002\000\126\004" +
    "\uffba\011\uffba\012\uffba\014\uffba\015\uffba\017\uffba\021\uffba" +
    "\022\uffba\023\uffba\024\uffba\025\uffba\031\uffba\033\uffba\034" +
    "\uffba\035\uffba\041\uffba\042\uffba\044\uffba\046\uffba\051\uffba" +
    "\052\uffba\055\uffba\056\uffba\057\uffba\062\uffba\063\uffba\064" +
    "\uffba\066\uffba\071\uffba\073\uffba\074\uffba\075\uffba\076\uffba" +
    "\077\uffba\100\uffba\102\uffba\103\uffba\104\uffba\105\uffba\106" +
    "\uffba\107\uffba\110\uffba\001\002\000\126\004\uffb9\011\uffb9" +
    "\012\uffb9\014\uffb9\015\uffb9\017\uffb9\021\uffb9\022\uffb9\023" +
    "\uffb9\024\uffb9\025\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\041\uffb9\042\uffb9\044\uffb9\046\uffb9\051\uffb9\052\uffb9\055" +
    "\uffb9\056\uffb9\057\uffb9\062\uffb9\063\uffb9\064\uffb9\066\uffb9" +
    "\071\uffb9\073\uffb9\074\uffb9\075\uffb9\076\uffb9\077\uffb9\100" +
    "\uffb9\102\uffb9\103\uffb9\104\uffb9\105\uffb9\106\uffb9\107\uffb9" +
    "\110\uffb9\001\002\000\046\004\121\017\131\033\114\046" +
    "\123\051\115\052\124\056\111\057\130\062\126\063\113" +
    "\071\117\073\132\076\103\103\110\104\127\105\112\106" +
    "\074\110\120\001\002\000\046\004\121\017\131\033\114" +
    "\046\123\051\115\052\124\056\111\057\130\062\126\063" +
    "\113\071\117\073\132\076\103\103\110\104\127\105\112" +
    "\106\074\110\120\001\002\000\004\070\u0131\001\002\000" +
    "\004\061\u0129\001\002\000\126\004\uffb8\011\uffb8\012\uffb8" +
    "\014\uffb8\015\uffb8\017\uffb8\021\uffb8\022\uffb8\023\uffb8\024" +
    "\uffb8\025\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\041\uffb8" +
    "\042\uffb8\044\uffb8\046\uffb8\051\uffb8\052\uffb8\055\uffb8\056" +
    "\uffb8\057\uffb8\062\uffb8\063\uffb8\064\uffb8\066\uffb8\071\uffb8" +
    "\073\uffb8\074\uffb8\075\uffb8\076\uffb8\077\uffb8\100\uffb8\102" +
    "\uffb8\103\uffb8\104\uffb8\105\uffb8\106\uffb8\107\uffb8\110\uffb8" +
    "\001\002\000\050\004\121\017\131\033\114\046\123\051" +
    "\115\052\124\056\111\057\130\062\126\063\113\070\u0127" +
    "\071\117\073\132\076\103\103\110\104\127\105\112\106" +
    "\074\110\120\001\002\000\126\004\uffb7\011\uffb7\012\uffb7" +
    "\014\uffb7\015\uffb7\017\uffb7\021\uffb7\022\uffb7\023\uffb7\024" +
    "\uffb7\025\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\041\uffb7" +
    "\042\uffb7\044\uffb7\046\uffb7\051\uffb7\052\uffb7\055\uffb7\056" +
    "\uffb7\057\uffb7\062\uffb7\063\uffb7\064\uffb7\066\uffb7\071\uffb7" +
    "\073\uffb7\074\uffb7\075\uffb7\076\uffb7\077\uffb7\100\uffb7\102" +
    "\uffb7\103\uffb7\104\uffb7\105\uffb7\106\uffb7\107\uffb7\110\uffb7" +
    "\001\002\000\126\004\uffbd\011\uffbd\012\uffbd\014\uffbd\015" +
    "\uffbd\017\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd" +
    "\031\uffbd\033\uffbd\034\uffbd\035\uffbd\041\uffbd\042\uffbd\044" +
    "\uffbd\046\uffbd\051\uffbd\052\uffbd\055\uffbd\056\uffbd\057\uffbd" +
    "\062\uffbd\063\uffbd\064\uffbd\066\uffbd\071\uffbd\073\uffbd\074" +
    "\uffbd\075\uffbd\076\uffbd\077\uffbd\100\uffbd\102\uffbd\103\uffbd" +
    "\104\uffbd\105\uffbd\106\uffbd\107\uffbd\110\uffbd\001\002\000" +
    "\126\004\uffca\011\uffca\012\uffca\014\uffca\015\uffca\017\uffca" +
    "\021\uffca\022\uffca\023\uffca\024\uffca\025\uffca\031\uffca\033" +
    "\uffca\034\uffca\035\uffca\041\uffca\042\uffca\044\uffca\046\uffca" +
    "\051\uffca\052\uffca\055\uffca\056\uffca\057\uffca\062\uffca\063" +
    "\uffca\064\uffca\066\uffca\071\uffca\073\uffca\074\uffca\075\uffca" +
    "\076\uffca\077\uffca\100\uffca\102\uffca\103\uffca\104\uffca\105" +
    "\uffca\106\uffca\107\uffca\110\uffca\001\002\000\046\004\121" +
    "\017\131\033\114\046\123\051\115\052\124\056\111\057" +
    "\130\062\126\063\113\071\117\073\132\076\103\103\110" +
    "\104\127\105\112\106\074\110\120\001\002\000\126\004" +
    "\121\011\uffee\012\u0107\014\uffee\015\377\017\131\021\uffee" +
    "\022\364\023\365\024\363\025\uffee\031\u0104\033\114\034" +
    "\uffee\035\uffee\041\u010b\042\uffee\044\372\046\123\051\115" +
    "\052\124\055\373\056\111\057\130\062\126\063\113\064" +
    "\uffc7\066\367\071\117\073\132\074\014\075\011\076\103" +
    "\077\024\100\362\102\uffee\103\110\104\127\105\112\106" +
    "\074\107\uffee\110\120\001\002\000\126\004\uffb6\011\uffb6" +
    "\012\uffb6\014\uffb6\015\uffb6\017\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\031\uffb6\033\uffb6\034\uffb6\035\uffb6" +
    "\041\uffb6\042\uffb6\044\uffb6\046\uffb6\051\uffb6\052\uffb6\055" +
    "\uffb6\056\uffb6\057\uffb6\062\uffb6\063\uffb6\064\uffb6\066\uffb6" +
    "\071\uffb6\073\uffb6\074\uffb6\075\uffb6\076\uffb6\077\uffb6\100" +
    "\uffb6\102\uffb6\103\uffb6\104\uffb6\105\uffb6\106\uffb6\107\uffb6" +
    "\110\uffb6\001\002\000\126\004\uffc0\011\uffc0\012\uffc0\014" +
    "\uffc0\015\uffc0\017\uffc0\021\uffc0\022\uffc0\023\uffc0\024\uffc0" +
    "\025\uffc0\031\uffc0\033\uffc0\034\uffc0\035\uffc0\041\uffc0\042" +
    "\uffc0\044\uffc0\046\uffc0\051\uffc0\052\uffc0\055\uffc0\056\uffc0" +
    "\057\uffc0\062\uffc0\063\uffc0\064\uffc0\066\uffc0\071\uffc0\073" +
    "\uffc0\074\uffc0\075\uffc0\076\uffc0\077\uffc0\100\uffc0\102\uffc0" +
    "\103\uffc0\104\uffc0\105\uffc0\106\uffc0\107\uffc0\110\uffc0\001" +
    "\002\000\004\043\u011c\001\002\000\126\004\uffbe\011\uffbe" +
    "\012\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\041\uffbe\042\uffbe\044\uffbe\046\uffbe\051\uffbe\052\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\062\uffbe\063\uffbe\064\uffbe\066\uffbe" +
    "\071\uffbe\073\uffbe\074\uffbe\075\uffbe\076\uffbe\077\uffbe\100" +
    "\uffbe\102\uffbe\103\uffbe\104\uffbe\105\uffbe\106\uffbe\107\uffbe" +
    "\110\uffbe\001\002\000\004\070\u011b\001\002\000\126\004" +
    "\uffc1\011\uffc1\012\uffc1\014\uffc1\015\uffc1\017\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\031\uffc1\033\uffc1\034" +
    "\uffc1\035\uffc1\041\uffc1\042\uffc1\044\uffc1\046\uffc1\051\uffc1" +
    "\052\uffc1\055\uffc1\056\uffc1\057\uffc1\062\uffc1\063\uffc1\064" +
    "\uffc1\066\uffc1\071\uffc1\073\uffc1\074\uffc1\075\uffc1\076\uffc1" +
    "\077\uffc1\100\uffc1\102\uffc1\103\uffc1\104\uffc1\105\uffc1\106" +
    "\uffc1\107\uffc1\110\uffc1\001\002\000\004\064\u011a\001\002" +
    "\000\004\046\u0116\001\002\000\126\004\uffc3\011\uffc3\012" +
    "\uffc3\014\uffc3\015\uffc3\017\uffc3\021\uffc3\022\uffc3\023\uffc3" +
    "\024\uffc3\025\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\041" +
    "\uffc3\042\uffc3\044\uffc3\046\uffc3\051\uffc3\052\uffc3\055\uffc3" +
    "\056\uffc3\057\uffc3\062\uffc3\063\uffc3\064\uffc3\066\uffc3\071" +
    "\uffc3\073\uffc3\074\uffc3\075\uffc3\076\uffc3\077\uffc3\100\uffc3" +
    "\102\uffc3\103\uffc3\104\uffc3\105\uffc3\106\uffc3\107\uffc3\110" +
    "\uffc3\001\002\000\126\004\uffc5\011\uffc5\012\uffc5\014\uffc5" +
    "\015\uffc5\017\uffc5\021\uffc5\022\uffc5\023\uffc5\024\uffc5\025" +
    "\uffc5\031\uffc5\033\uffc5\034\uffc5\035\uffc5\041\uffc5\042\uffc5" +
    "\044\uffc5\046\uffc5\051\uffc5\052\uffc5\055\uffc5\056\uffc5\057" +
    "\uffc5\062\uffc5\063\uffc5\064\uffc5\066\uffc5\071\uffc5\073\uffc5" +
    "\074\uffc5\075\uffc5\076\uffc5\077\uffc5\100\uffc5\102\uffc5\103" +
    "\uffc5\104\uffc5\105\uffc5\106\uffc5\107\uffc5\110\uffc5\001\002" +
    "\000\004\070\u0115\001\002\000\126\004\uffc2\011\uffc2\012" +
    "\uffc2\014\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\031\uffc2\033\uffc2\034\uffc2\035\uffc2\041" +
    "\uffc2\042\uffc2\044\uffc2\046\uffc2\051\uffc2\052\uffc2\055\uffc2" +
    "\056\uffc2\057\uffc2\062\uffc2\063\uffc2\064\uffc2\066\uffc2\071" +
    "\uffc2\073\uffc2\074\uffc2\075\uffc2\076\uffc2\077\uffc2\100\uffc2" +
    "\102\uffc2\103\uffc2\104\uffc2\105\uffc2\106\uffc2\107\uffc2\110" +
    "\uffc2\001\002\000\126\004\uffbb\011\uffbb\012\uffbb\014\uffbb" +
    "\015\uffbb\017\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025" +
    "\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\041\uffbb\042\uffbb" +
    "\044\uffbb\046\uffbb\051\uffbb\052\uffbb\055\uffbb\056\uffbb\057" +
    "\uffbb\062\uffbb\063\uffbb\064\uffbb\066\uffbb\071\uffbb\073\uffbb" +
    "\074\uffbb\075\uffbb\076\uffbb\077\uffbb\100\uffbb\102\uffbb\103" +
    "\uffbb\104\uffbb\105\uffbb\106\uffbb\107\uffbb\110\uffbb\001\002" +
    "\000\126\004\uffb5\011\uffb5\012\uffb5\014\uffb5\015\uffb5\017" +
    "\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\031\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\041\uffb5\042\uffb5\044\uffb5\046" +
    "\uffb5\051\uffb5\052\uffb5\055\uffb5\056\uffb5\057\uffb5\062\uffb5" +
    "\063\uffb5\064\uffb5\066\uffb5\071\uffb5\073\uffb5\074\uffb5\075" +
    "\uffb5\076\uffb5\077\uffb5\100\uffb5\102\uffb5\103\uffb5\104\uffb5" +
    "\105\uffb5\106\uffb5\107\uffb5\110\uffb5\001\002\000\046\004" +
    "\121\017\131\033\114\046\123\051\115\052\124\056\111" +
    "\057\130\062\126\063\113\071\117\073\132\076\103\103" +
    "\110\104\127\105\112\106\074\110\120\001\002\000\126" +
    "\004\uffbc\011\uffbc\012\uffbc\014\uffbc\015\uffbc\017\uffbc\021" +
    "\uffbc\022\uffbc\023\uffbc\024\uffbc\025\uffbc\031\uffbc\033\uffbc" +
    "\034\uffbc\035\uffbc\041\uffbc\042\uffbc\044\uffbc\046\uffbc\051" +
    "\uffbc\052\uffbc\055\uffbc\056\uffbc\057\uffbc\062\uffbc\063\uffbc" +
    "\064\uffbc\066\uffbc\071\uffbc\073\uffbc\074\uffbc\075\uffbc\076" +
    "\uffbc\077\uffbc\100\uffbc\102\uffbc\103\uffbc\104\uffbc\105\uffbc" +
    "\106\uffbc\107\uffbc\110\uffbc\001\002\000\004\044\uffa0\001" +
    "\002\000\004\044\372\001\002\000\130\004\uff9f\011\uff9f" +
    "\012\uff9f\014\uff9f\015\uff9f\017\uff9f\021\uff9f\022\uff9f\023" +
    "\uff9f\024\uff9f\025\uff9f\027\uff9f\031\uff9f\033\uff9f\034\uff9f" +
    "\035\uff9f\041\uff9f\042\uff9f\044\uff9f\046\uff9f\051\uff9f\052" +
    "\uff9f\055\uff9f\056\uff9f\057\uff9f\062\uff9f\063\uff9f\064\uff9f" +
    "\066\uff9f\071\uff9f\073\uff9f\074\uff9f\075\uff9f\076\uff9f\077" +
    "\uff9f\100\uff9f\102\uff9f\103\uff9f\104\uff9f\105\uff9f\106\uff9f" +
    "\107\uff9f\110\uff9f\001\002\000\130\004\uff9b\011\uff9b\012" +
    "\uff9b\014\uff9b\015\uff9b\017\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\uff9b\027\u0112\031\uff9b\033\uff9b\034\uff9b\035" +
    "\uff9b\041\uff9b\042\uff9b\044\uff9b\046\uff9b\051\uff9b\052\uff9b" +
    "\055\uff9b\056\uff9b\057\uff9b\062\uff9b\063\uff9b\064\uff9b\066" +
    "\uff9b\071\uff9b\073\uff9b\074\uff9b\075\uff9b\076\uff9b\077\uff9b" +
    "\100\uff9b\102\uff9b\103\uff9b\104\uff9b\105\uff9b\106\uff9b\107" +
    "\uff9b\110\uff9b\001\002\000\126\004\uff9e\011\uff9e\012\uff9e" +
    "\014\uff9e\015\uff9e\017\uff9e\021\uff9e\022\uff9e\023\uff9e\024" +
    "\uff9e\025\uff9e\031\uff9e\033\uff9e\034\uff9e\035\uff9e\041\uff9e" +
    "\042\uff9e\044\uff9e\046\uff9e\051\uff9e\052\uff9e\055\uff9e\056" +
    "\uff9e\057\uff9e\062\uff9e\063\uff9e\064\uff9e\066\uff9e\071\uff9e" +
    "\073\uff9e\074\uff9e\075\uff9e\076\uff9e\077\uff9e\100\uff9e\102" +
    "\uff9e\103\uff9e\104\uff9e\105\uff9e\106\uff9e\107\uff9e\110\uff9e" +
    "\001\002\000\004\044\uff9d\001\002\000\004\044\372\001" +
    "\002\000\126\004\uff9c\011\uff9c\012\uff9c\014\uff9c\015\uff9c" +
    "\017\uff9c\021\uff9c\022\uff9c\023\uff9c\024\uff9c\025\uff9c\031" +
    "\uff9c\033\uff9c\034\uff9c\035\uff9c\041\uff9c\042\uff9c\044\uff9c" +
    "\046\uff9c\051\uff9c\052\uff9c\055\uff9c\056\uff9c\057\uff9c\062" +
    "\uff9c\063\uff9c\064\uff9c\066\uff9c\071\uff9c\073\uff9c\074\uff9c" +
    "\075\uff9c\076\uff9c\077\uff9c\100\uff9c\102\uff9c\103\uff9c\104" +
    "\uff9c\105\uff9c\106\uff9c\107\uff9c\110\uff9c\001\002\000\126" +
    "\004\uff98\011\uff98\012\uff98\014\uff98\015\uff98\017\uff98\021" +
    "\uff98\022\uff98\023\uff98\024\uff98\025\uff98\031\uff98\033\uff98" +
    "\034\uff98\035\uff98\041\uff98\042\uff98\044\uff98\046\uff98\051" +
    "\uff98\052\uff98\055\uff98\056\uff98\057\uff98\062\uff98\063\uff98" +
    "\064\uff98\066\uff98\071\uff98\073\uff98\074\uff98\075\uff98\076" +
    "\uff98\077\uff98\100\uff98\102\uff98\103\uff98\104\uff98\105\uff98" +
    "\106\uff98\107\uff98\110\uff98\001\002\000\046\004\121\017" +
    "\131\033\114\046\123\051\115\052\124\056\111\057\130" +
    "\062\126\063\113\071\117\073\132\076\103\103\110\104" +
    "\127\105\112\106\074\110\120\001\002\000\004\067\u0118" +
    "\001\002\000\004\070\u0119\001\002\000\126\004\uff96\011" +
    "\uff96\012\uff96\014\uff96\015\uff96\017\uff96\021\uff96\022\uff96" +
    "\023\uff96\024\uff96\025\uff96\031\uff96\033\uff96\034\uff96\035" +
    "\uff96\041\uff96\042\uff96\044\uff96\046\uff96\051\uff96\052\uff96" +
    "\055\uff96\056\uff96\057\uff96\062\uff96\063\uff96\064\uff96\066" +
    "\uff96\071\uff96\073\uff96\074\uff96\075\uff96\076\uff96\077\uff96" +
    "\100\uff96\102\uff96\103\uff96\104\uff96\105\uff96\106\uff96\107" +
    "\uff96\110\uff96\001\002\000\040\002\uffe5\011\uffe5\014\uffe5" +
    "\021\uffe5\025\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\042" +
    "\uffe5\074\uffe5\075\uffe5\077\uffe5\102\uffe5\107\uffe5\001\002" +
    "\000\126\004\uffbf\011\uffbf\012\uffbf\014\uffbf\015\uffbf\017" +
    "\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\031\uffbf" +
    "\033\uffbf\034\uffbf\035\uffbf\041\uffbf\042\uffbf\044\uffbf\046" +
    "\uffbf\051\uffbf\052\uffbf\055\uffbf\056\uffbf\057\uffbf\062\uffbf" +
    "\063\uffbf\064\uffbf\066\uffbf\071\uffbf\073\uffbf\074\uffbf\075" +
    "\uffbf\076\uffbf\077\uffbf\100\uffbf\102\uffbf\103\uffbf\104\uffbf" +
    "\105\uffbf\106\uffbf\107\uffbf\110\uffbf\001\002\000\046\004" +
    "\121\017\131\033\114\046\123\051\115\052\124\056\111" +
    "\057\130\062\126\063\113\071\117\073\132\076\103\103" +
    "\110\104\127\105\112\106\074\110\120\001\002\000\004" +
    "\070\u011e\001\002\000\126\004\uff93\011\uff93\012\uff93\014" +
    "\uff93\015\uff93\017\uff93\021\uff93\022\uff93\023\uff93\024\uff93" +
    "\025\uff93\031\uff93\033\uff93\034\uff93\035\uff93\041\uff93\042" +
    "\uff93\044\uff93\046\uff93\051\uff93\052\uff93\055\uff93\056\uff93" +
    "\057\uff93\062\uff93\063\uff93\064\uff93\066\uff93\071\uff93\073" +
    "\uff93\074\uff93\075\uff93\076\uff93\077\uff93\100\uff93\102\uff93" +
    "\103\uff93\104\uff93\105\uff93\106\uff93\107\uff93\110\uff93\001" +
    "\002\000\126\004\uffc4\011\uffc4\012\uffc4\014\uffc4\015\uffc4" +
    "\017\uffc4\021\uffc4\022\uffc4\023\uffc4\024\uffc4\025\uffc4\031" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\041\uffc4\042\uffc4\044\uffc4" +
    "\046\uffc4\051\uffc4\052\uffc4\055\uffc4\056\uffc4\057\uffc4\062" +
    "\uffc4\063\uffc4\064\uffc4\066\uffc4\071\uffc4\073\uffc4\074\uffc4" +
    "\075\uffc4\076\uffc4\077\uffc4\100\uffc4\102\uffc4\103\uffc4\104" +
    "\uffc4\105\uffc4\106\uffc4\107\uffc4\110\uffc4\001\002\000\004" +
    "\070\u0121\001\002\000\126\004\uff92\011\uff92\012\uff92\014" +
    "\uff92\015\uff92\017\uff92\021\uff92\022\uff92\023\uff92\024\uff92" +
    "\025\uff92\031\uff92\033\uff92\034\uff92\035\uff92\041\uff92\042" +
    "\uff92\044\uff92\046\uff92\051\uff92\052\uff92\055\uff92\056\uff92" +
    "\057\uff92\062\uff92\063\uff92\064\uff92\066\uff92\071\uff92\073" +
    "\uff92\074\uff92\075\uff92\076\uff92\077\uff92\100\uff92\102\uff92" +
    "\103\uff92\104\uff92\105\uff92\106\uff92\107\uff92\110\uff92\001" +
    "\002\000\126\004\121\011\uffee\012\u0107\014\uffee\015\377" +
    "\017\131\021\uffee\022\364\023\365\024\363\025\uffee\031" +
    "\u0104\033\114\034\uffee\035\uffee\041\u010b\042\uffee\044\372" +
    "\046\123\051\115\052\124\055\373\056\111\057\130\062" +
    "\126\063\113\064\uffc6\066\367\071\117\073\132\074\014" +
    "\075\011\076\103\077\024\100\362\102\uffee\103\110\104" +
    "\127\105\112\106\074\107\uffee\110\120\001\002\000\004" +
    "\064\uffc9\001\002\000\004\064\u0125\001\002\000\130\004" +
    "\uffc8\011\uffc8\012\uffc8\014\uffc8\015\uffc8\017\uffc8\021\uffc8" +
    "\022\uffc8\023\uffc8\024\uffc8\025\uffc8\027\uffc8\031\uffc8\033" +
    "\uffc8\034\uffc8\035\uffc8\041\uffc8\042\uffc8\044\uffc8\046\uffc8" +
    "\051\uffc8\052\uffc8\055\uffc8\056\uffc8\057\uffc8\062\uffc8\063" +
    "\uffc8\064\uffc8\066\uffc8\071\uffc8\073\uffc8\074\uffc8\075\uffc8" +
    "\076\uffc8\077\uffc8\100\uffc8\102\uffc8\103\uffc8\104\uffc8\105" +
    "\uffc8\106\uffc8\107\uffc8\110\uffc8\001\002\000\004\070\u0128" +
    "\001\002\000\126\004\uff95\011\uff95\012\uff95\014\uff95\015" +
    "\uff95\017\uff95\021\uff95\022\uff95\023\uff95\024\uff95\025\uff95" +
    "\031\uff95\033\uff95\034\uff95\035\uff95\041\uff95\042\uff95\044" +
    "\uff95\046\uff95\051\uff95\052\uff95\055\uff95\056\uff95\057\uff95" +
    "\062\uff95\063\uff95\064\uff95\066\uff95\071\uff95\073\uff95\074" +
    "\uff95\075\uff95\076\uff95\077\uff95\100\uff95\102\uff95\103\uff95" +
    "\104\uff95\105\uff95\106\uff95\107\uff95\110\uff95\001\002\000" +
    "\126\004\uff94\011\uff94\012\uff94\014\uff94\015\uff94\017\uff94" +
    "\021\uff94\022\uff94\023\uff94\024\uff94\025\uff94\031\uff94\033" +
    "\uff94\034\uff94\035\uff94\041\uff94\042\uff94\044\uff94\046\uff94" +
    "\051\uff94\052\uff94\055\uff94\056\uff94\057\uff94\062\uff94\063" +
    "\uff94\064\uff94\066\uff94\071\uff94\073\uff94\074\uff94\075\uff94" +
    "\076\uff94\077\uff94\100\uff94\102\uff94\103\uff94\104\uff94\105" +
    "\uff94\106\uff94\107\uff94\110\uff94\001\002\000\050\004\121" +
    "\017\131\033\114\046\123\051\115\052\124\056\111\057" +
    "\130\062\126\063\113\071\117\073\132\076\103\103\110" +
    "\104\127\105\112\106\074\110\120\111\u012c\001\002\000" +
    "\006\061\u012e\070\u012f\001\002\000\006\061\uff8f\070\uff8f" +
    "\001\002\000\006\061\uff8c\070\uff8c\001\002\000\006\061" +
    "\uff8d\070\uff8d\001\002\000\050\004\121\017\131\033\114" +
    "\046\123\051\115\052\124\056\111\057\130\062\126\063" +
    "\113\071\117\073\132\076\103\103\110\104\127\105\112" +
    "\106\074\110\120\111\u012c\001\002\000\126\004\uff90\011" +
    "\uff90\012\uff90\014\uff90\015\uff90\017\uff90\021\uff90\022\uff90" +
    "\023\uff90\024\uff90\025\uff90\031\uff90\033\uff90\034\uff90\035" +
    "\uff90\041\uff90\042\uff90\044\uff90\046\uff90\051\uff90\052\uff90" +
    "\055\uff90\056\uff90\057\uff90\062\uff90\063\uff90\064\uff90\066" +
    "\uff90\071\uff90\073\uff90\074\uff90\075\uff90\076\uff90\077\uff90" +
    "\100\uff90\102\uff90\103\uff90\104\uff90\105\uff90\106\uff90\107" +
    "\uff90\110\uff90\001\002\000\006\061\uff8e\070\uff8e\001\002" +
    "\000\126\004\uff97\011\uff97\012\uff97\014\uff97\015\uff97\017" +
    "\uff97\021\uff97\022\uff97\023\uff97\024\uff97\025\uff97\031\uff97" +
    "\033\uff97\034\uff97\035\uff97\041\uff97\042\uff97\044\uff97\046" +
    "\uff97\051\uff97\052\uff97\055\uff97\056\uff97\057\uff97\062\uff97" +
    "\063\uff97\064\uff97\066\uff97\071\uff97\073\uff97\074\uff97\075" +
    "\uff97\076\uff97\077\uff97\100\uff97\102\uff97\103\uff97\104\uff97" +
    "\105\uff97\106\uff97\107\uff97\110\uff97\001\002\000\004\070" +
    "\u0133\001\002\000\126\004\uff91\011\uff91\012\uff91\014\uff91" +
    "\015\uff91\017\uff91\021\uff91\022\uff91\023\uff91\024\uff91\025" +
    "\uff91\031\uff91\033\uff91\034\uff91\035\uff91\041\uff91\042\uff91" +
    "\044\uff91\046\uff91\051\uff91\052\uff91\055\uff91\056\uff91\057" +
    "\uff91\062\uff91\063\uff91\064\uff91\066\uff91\071\uff91\073\uff91" +
    "\074\uff91\075\uff91\076\uff91\077\uff91\100\uff91\102\uff91\103" +
    "\uff91\104\uff91\105\uff91\106\uff91\107\uff91\110\uff91\001\002" +
    "\000\004\044\uff9a\001\002\000\004\044\372\001\002\000" +
    "\126\004\uff99\011\uff99\012\uff99\014\uff99\015\uff99\017\uff99" +
    "\021\uff99\022\uff99\023\uff99\024\uff99\025\uff99\031\uff99\033" +
    "\uff99\034\uff99\035\uff99\041\uff99\042\uff99\044\uff99\046\uff99" +
    "\051\uff99\052\uff99\055\uff99\056\uff99\057\uff99\062\uff99\063" +
    "\uff99\064\uff99\066\uff99\071\uff99\073\uff99\074\uff99\075\uff99" +
    "\076\uff99\077\uff99\100\uff99\102\uff99\103\uff99\104\uff99\105" +
    "\uff99\106\uff99\107\uff99\110\uff99\001\002\000\010\045\066" +
    "\073\062\110\uffd2\001\002\000\004\016\u0139\001\002\000" +
    "\020\011\035\014\033\025\027\034\036\042\040\101\044" +
    "\107\032\001\002\000\004\110\u013b\001\002\000\004\046" +
    "\uffe4\001\002\000\004\046\u013d\001\002\000\022\011\035" +
    "\014\033\025\027\034\036\035\034\042\040\067\uffb3\107" +
    "\032\001\002\000\004\067\u013f\001\002\000\004\070\uffe3" +
    "\001\002\000\004\070\u0141\001\002\000\040\002\uffe2\011" +
    "\uffe2\014\uffe2\021\uffe2\025\uffe2\032\uffe2\034\uffe2\035\uffe2" +
    "\036\uffe2\042\uffe2\074\uffe2\075\uffe2\077\uffe2\102\uffe2\107" +
    "\uffe2\001\002\000\006\020\341\070\u0143\001\002\000\040" +
    "\002\ufff4\011\ufff4\014\ufff4\021\ufff4\025\ufff4\032\ufff4\034" +
    "\ufff4\035\ufff4\036\ufff4\042\ufff4\074\ufff4\075\ufff4\077\ufff4" +
    "\102\ufff4\107\ufff4\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0142\000\006\003\003\114\004\001\001\000\002\001" +
    "\001\000\026\004\021\005\017\006\014\007\016\010\005" +
    "\011\020\012\012\013\022\014\015\043\011\001\001\000" +
    "\002\001\001\000\014\064\025\071\027\072\245\074\u0136" +
    "\076\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\064\025\071\027\072\245\074\244\076\036\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\006\243\007\016" +
    "\010\005\011\020\012\012\013\022\014\015\043\011\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\064\025\071\027\072\030\073\024\076\036\001" +
    "\001\000\004\104\237\001\001\000\002\001\001\000\004" +
    "\122\232\001\001\000\002\001\001\000\010\077\066\100" +
    "\063\101\067\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\064\025\071\027" +
    "\072\041\075\042\076\036\001\001\000\010\100\063\101" +
    "\062\102\060\001\001\000\004\041\045\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\064" +
    "\025\066\051\071\027\072\030\073\047\076\036\107\052" +
    "\110\050\001\001\000\004\041\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\064\025\066\055\071\027\072\030\073\047\076" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\100" +
    "\064\001\001\000\002\001\001\000\002\001\001\000\042" +
    "\040\121\044\124\047\115\050\106\051\105\052\104\053" +
    "\101\054\100\055\075\056\074\057\072\060\070\061\071" +
    "\062\077\063\076\067\103\001\001\000\002\001\001\000" +
    "\004\100\064\001\001\000\004\037\206\001\001\000\002" +
    "\001\001\000\004\036\201\001\001\000\002\001\001\000" +
    "\004\034\174\001\001\000\004\033\165\001\001\000\002" +
    "\001\001\000\004\040\213\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\040\121\044\124\061\151\062\077\063\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\040\121\044\124\061\143\062" +
    "\077\063\076\001\001\000\014\040\121\044\124\061\142" +
    "\062\077\063\076\001\001\000\052\040\121\044\124\047" +
    "\135\050\106\051\105\052\104\053\101\054\100\055\075" +
    "\056\074\057\072\060\070\061\071\062\077\063\076\064" +
    "\025\071\027\072\030\073\136\076\036\001\001\000\002" +
    "\001\001\000\014\040\121\044\124\061\134\062\077\063" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\040\121\044\124\061" +
    "\132\062\077\063\076\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\040\121\044\124\061\140\062\077\063\076" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\026\040\121\044\124\061\145" +
    "\062\077\063\076\064\025\071\027\072\030\073\146\076" +
    "\036\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\040" +
    "\121\044\124\051\154\052\104\053\101\054\100\055\075" +
    "\056\074\057\072\060\070\061\153\062\077\063\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\040\121" +
    "\044\124\052\156\053\101\054\100\055\075\056\074\057" +
    "\072\060\070\061\153\062\077\063\076\001\001\000\002" +
    "\001\001\000\030\040\121\044\124\053\160\054\100\055" +
    "\075\056\074\057\072\060\070\061\153\062\077\063\076" +
    "\001\001\000\002\001\001\000\026\040\121\044\124\054" +
    "\162\055\075\056\074\057\072\060\070\061\153\062\077" +
    "\063\076\001\001\000\002\001\001\000\024\040\121\044" +
    "\124\055\164\056\074\057\072\060\070\061\153\062\077" +
    "\063\076\001\001\000\004\033\165\001\001\000\022\040" +
    "\121\044\124\056\170\057\072\060\070\061\153\062\077" +
    "\063\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\034\174\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\020\040\121\044\124\057\176\060" +
    "\070\061\153\062\077\063\076\001\001\000\002\001\001" +
    "\000\004\036\201\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\040\121\044\124\060\202\061\153\062\077" +
    "\063\076\001\001\000\004\037\206\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\040\121" +
    "\044\124\061\207\062\077\063\076\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\040\121\044\124\047\226" +
    "\050\106\051\105\052\104\053\101\054\100\055\075\056" +
    "\074\057\072\060\070\061\071\062\077\063\076\001\001" +
    "\000\044\040\121\044\124\047\220\050\106\051\105\052" +
    "\104\053\101\054\100\055\075\056\074\057\072\060\070" +
    "\061\071\062\077\063\076\111\222\112\221\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\040\040\121" +
    "\044\124\047\225\050\106\051\105\052\104\053\101\054" +
    "\100\055\075\056\074\057\072\060\070\061\071\062\077" +
    "\063\076\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\040\040\121\044\124\047\231\050\106" +
    "\051\105\052\104\053\101\054\100\055\075\056\074\057" +
    "\072\060\070\061\071\062\077\063\076\001\001\000\002" +
    "\001\001\000\002\001\001\000\040\040\121\044\124\047" +
    "\234\050\106\051\105\052\104\053\101\054\100\055\075" +
    "\056\074\057\072\060\070\061\071\062\077\063\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\077\304\100\063" +
    "\101\067\105\305\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\064\025\071\027\072\245" +
    "\074\251\076\036\001\001\000\012\077\257\100\063\101" +
    "\067\106\260\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\040\121\044\124\047\255\050\106\051\105\052" +
    "\104\053\101\054\100\055\075\056\074\057\072\060\070" +
    "\061\071\062\077\063\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\077\263\100\063\101\067\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\042\040\121\044\124" +
    "\047\115\050\106\051\105\052\104\053\101\054\100\055" +
    "\075\056\074\057\072\060\070\061\071\062\077\063\076" +
    "\067\266\001\001\000\002\001\001\000\002\001\001\000" +
    "\042\040\121\044\124\047\115\050\106\051\105\052\104" +
    "\053\101\054\100\055\075\056\074\057\072\060\070\061" +
    "\071\062\077\063\076\067\271\001\001\000\002\001\001" +
    "\000\014\064\025\071\027\072\041\075\273\076\036\001" +
    "\001\000\004\041\274\001\001\000\002\001\001\000\022" +
    "\064\025\066\051\071\027\072\030\073\047\076\036\107" +
    "\276\110\050\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\040\040\121\044\124\047\302\050" +
    "\106\051\105\052\104\053\101\054\100\055\075\056\074" +
    "\057\072\060\070\061\071\062\077\063\076\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\077\310\100\063\101\067\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\065\312\001\001" +
    "\000\002\001\001\000\040\040\121\044\124\047\314\050" +
    "\106\051\105\052\104\053\101\054\100\055\075\056\074" +
    "\057\072\060\070\061\071\062\077\063\076\001\001\000" +
    "\002\001\001\000\042\035\317\040\121\044\124\047\316" +
    "\050\106\051\105\052\104\053\101\054\100\055\075\056" +
    "\074\057\072\060\070\061\071\062\077\063\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\040\040\121\044\124\047\322\050\106\051\105\052\104" +
    "\053\101\054\100\055\075\056\074\057\072\060\070\061" +
    "\071\062\077\063\076\001\001\000\002\001\001\000\004" +
    "\065\324\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\115\327\001\001\000\020\064\025\070\331\071\027" +
    "\072\245\074\330\076\036\113\332\001\001\000\012\077" +
    "\336\100\063\101\067\103\337\001\001\000\016\064\025" +
    "\071\027\072\245\074\330\076\036\113\334\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\077" +
    "\342\100\063\101\067\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\064" +
    "\025\071\027\072\041\075\346\076\036\001\001\000\004" +
    "\041\347\001\001\000\002\001\001\000\004\116\351\001" +
    "\001\000\002\001\001\000\022\064\025\066\051\071\027" +
    "\072\030\073\047\076\036\107\353\110\050\001\001\000" +
    "\002\001\001\000\004\117\355\001\001\000\002\001\001" +
    "\000\104\012\u0104\013\u0107\014\u0101\015\u0102\016\373\017" +
    "\u0105\020\375\021\377\022\370\023\u010b\024\u0108\025\357" +
    "\026\360\027\365\030\367\031\374\032\u0109\040\121\043" +
    "\011\044\124\047\u0100\050\106\051\105\052\104\053\101" +
    "\054\100\055\075\056\074\057\072\060\070\061\071\062" +
    "\077\063\076\001\001\000\002\001\001\000\002\001\001" +
    "\000\040\040\121\044\124\047\u0133\050\106\051\105\052" +
    "\104\053\101\054\100\055\075\056\074\057\072\060\070" +
    "\061\071\062\077\063\076\001\001\000\014\040\121\044" +
    "\124\061\u0131\062\077\063\076\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\040\040\121\044" +
    "\124\047\u0125\050\106\051\105\052\104\053\101\054\100" +
    "\055\075\056\074\057\072\060\070\061\071\062\077\063" +
    "\076\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\123\u0121\001\001\000\014\040\121\044\124\061\u011f\062" +
    "\077\063\076\001\001\000\100\012\u0104\013\u0107\014\u0101" +
    "\017\u011e\020\375\021\377\022\370\023\u010b\024\u0108\025" +
    "\357\026\360\027\365\030\367\031\374\032\u0109\040\121" +
    "\043\011\044\124\047\u0100\050\106\051\105\052\104\053" +
    "\101\054\100\055\075\056\074\057\072\060\070\061\071" +
    "\062\077\063\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\040\040" +
    "\121\044\124\047\u010c\050\106\051\105\052\104\053\101" +
    "\054\100\055\075\056\074\057\072\060\070\061\071\062" +
    "\077\063\076\001\001\000\002\001\001\000\004\125\u010d" +
    "\001\001\000\004\020\u010e\001\001\000\004\126\u010f\001" +
    "\001\000\004\042\u0110\001\001\000\002\001\001\000\004" +
    "\127\u0112\001\001\000\004\020\u0113\001\001\000\002\001" +
    "\001\000\002\001\001\000\040\040\121\044\124\047\u0116" +
    "\050\106\051\105\052\104\053\101\054\100\055\075\056" +
    "\074\057\072\060\070\061\071\062\077\063\076\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\040\121\044\124" +
    "\061\u011c\062\077\063\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\104\012\u0104\013\u0107\014\u0101\015\u0122\016" +
    "\373\017\u0105\020\375\021\377\022\370\023\u010b\024\u0108" +
    "\025\357\026\360\027\365\030\367\031\374\032\u0109\040" +
    "\121\043\011\044\124\047\u0100\050\106\051\105\052\104" +
    "\053\101\054\100\055\075\056\074\057\072\060\070\061" +
    "\071\062\077\063\076\001\001\000\004\124\u0123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\044\040\121\044\124" +
    "\045\u0129\046\u012a\047\u012c\050\106\051\105\052\104\053" +
    "\101\054\100\055\075\056\074\057\072\060\070\061\071" +
    "\062\077\063\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\042\040\121" +
    "\044\124\046\u012f\047\u012c\050\106\051\105\052\104\053" +
    "\101\054\100\055\075\056\074\057\072\060\070\061\071" +
    "\062\077\063\076\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\130\u0134\001\001\000\004\020\u0135\001\001\000" +
    "\002\001\001\000\012\077\336\100\063\101\067\103\u0141" +
    "\001\001\000\002\001\001\000\014\064\025\071\027\072" +
    "\041\075\u0139\076\036\001\001\000\002\001\001\000\004" +
    "\120\u013b\001\001\000\002\001\001\000\022\064\025\066" +
    "\051\071\027\072\030\073\047\076\036\107\u013d\110\050" +
    "\001\001\000\002\001\001\000\004\121\u013f\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 2;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return new Symbol (sym.EOF); 
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // QualIdent ::= T_ID_U 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       //Return a typedefSTO
                       RESULT = ((MyParser) parser).DoQualIdent (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(50/*QualIdent*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // Designator3 ::= T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // Designator3 ::= T_COLONCOLON T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator3_Global_ID (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // Designator3 ::= T_NULLPTR 
            {
              STO RESULT = null;
		
                      	ConstSTO s = new ConstSTO ("nullptr", new NullPointerType("nullptr", 4));
                      	s.setValue(0.0);
                      	RESULT = s;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // Designator3 ::= T_FALSE 
            {
              STO RESULT = null;
		
                        ConstSTO s = new ConstSTO ("false", new BoolType("bool",4));
                        s.setValue(0.0);
                        RESULT = s;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // Designator3 ::= T_TRUE 
            {
              STO RESULT = null;
		
                        ConstSTO s = new ConstSTO ("true", new BoolType("bool",4));
                        s.setValue(1.0);
                        RESULT = s;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // Designator3 ::= T_STR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // Designator3 ::= T_CHAR_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new ConstSTO (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // Designator3 ::= T_FLOAT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO s = new ConstSTO (_1, new FloatType("float", 4));
                        s.setValue(Double.parseDouble(_1));
                        RESULT = s;
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // Designator3 ::= T_INT_LITERAL 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        ConstSTO s = new ConstSTO(_1,new IntType("int",4));
                        try{
	                        int value = Integer.decode(_1);
	                        s.setValue(value);
	                    }
	                    catch(NumberFormatException e){
	                      //TODO
	                    }
                        RESULT = s;
                        
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // Designator3 ::= T_LPAREN Expr T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        RESULT = _2;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(49/*Designator3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // Designator2 ::= Designator3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // Designator2 ::= Designator2 T_LPAREN OptExprList T_RPAREN 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        //Do function call check #5
                        //OptExprList containing all the parameters
                        RESULT = ((MyParser) parser).DoFuncCall (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // Designator2 ::= Designator2 IncDecOp 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if(_2.equals("++"))
                          RESULT = ((MyParser) parser).DoUnaryExpr(_1, new IncOp("postIncOp"));
                        else
                          RESULT = ((MyParser) parser).DoUnaryExpr(_1, new DecOp("postDecOp"));
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // Designator2 ::= Designator2 T_ARROW T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                       //Struct dereference
                        RESULT = ((MyParser) parser).DoArrowOp(_1,_2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // Designator2 ::= Designator2 T_LBRACKET Expr T_RBRACKET 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        //Check#11
                        RESULT = ((MyParser) parser).DoDesignator2_Array (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // Designator2 ::= Designator2 T_DOT T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = ((MyParser) parser).DoDesignator2_Dot (_1, _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(48/*Designator2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // Designator ::= Designator2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // Designator ::= IncDecOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		  
            if(_1.equals("++"))
			  RESULT = ((MyParser) parser).DoUnaryExpr(_2, new IncOp("preIncOp"));
			else
			  RESULT = ((MyParser) parser).DoUnaryExpr(_2, new DecOp("preDecOp"));
        
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // Designator ::= T_LPAREN Type T_RPAREN Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
        //Check 20 Type cast
          RESULT = ((MyParser) parser).DoCastCheck(_1,_2);
        
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // Designator ::= T_SIZEOF T_LPAREN Type T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
	      RESULT = ((MyParser) parser).DoSizeOfType(_2);
        
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // Designator ::= T_SIZEOF T_LPAREN Designator T_RPAREN 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		  RESULT = ((MyParser) parser).DoSizeOfDes(_2);
        
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // Designator ::= T_NOT Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            RESULT = ((MyParser) parser).DoUnaryExpr(_1, new NotOp());
        
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // Designator ::= UnarySign Designator 
            {
              STO RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
            if(_1.isError()){
              RESULT = _1;
            }
            else if(_2.equals("+")){
              if(_1.isConst()){
                ((ConstSTO)_1).setValue(+(((ConstSTO)_1).getValue()));
                RESULT = _1;
              }
              else{
                ExprSTO ret = new ExprSTO(_1.getName(), _1.getType());
                ret.setBase(_1.getBase());
                ret.setOffset(_1.getOffset());
                RESULT = ret;
              }  
			}
			else{
			  if(_1.isConst()){
			    ConstSTO ret = new ConstSTO(_1.getName());
			    ret.setType(_1.getType());
			    ret.setValue(-(((ConstSTO)_1).getValue()));
			    RESULT = ret;
			  }
			  /*else if(_1.isVar()){
			    ((VarSTO)_1).setNegative(true);
			    ExprSTO ret = new ExprSTO("-" + _1.getName(), _1.getType());
			    RESULT = ret;
			  }*/
			  else{
			    ExprSTO ret = new ExprSTO("-" + _1.getName(), _1.getType());
			    RESULT = ((MyParser) parser).doMinusUnary(_1);
			  }
			}
        
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // Designator ::= T_AMPERSAND Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                 //Addressof operation
                 //Argument pass by reference
			     RESULT = ((MyParser) parser).doAddressOfCheck(_1);
               
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // Designator ::= T_STAR Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                 //Dereference operation
                 RESULT = ((MyParser) parser).doDereferenceCheck(_1);
               
              CUP$parser$result = new java_cup.runtime.Symbol(47/*Designator*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // IncDecOp ::= T_MINUSMINUS 
            {
              String RESULT = null;
		
                        RESULT = "--";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // IncDecOp ::= T_PLUSPLUS 
            {
              String RESULT = null;
		
                        RESULT = "++";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(30/*IncDecOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // MulOp ::= T_MOD 
            {
              String RESULT = null;
		
                        RESULT = "%";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // MulOp ::= T_SLASH 
            {
              String RESULT = null;
		
                        RESULT = "/";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // MulOp ::= T_STAR 
            {
              String RESULT = null;
		
                        RESULT = "*";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(29/*MulOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // AddOp ::= T_MINUS 
            {
              String RESULT = null;
		
                        RESULT = "-";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // AddOp ::= T_PLUS 
            {
              String RESULT = null;
		
                        RESULT = "+";
                    
              CUP$parser$result = new java_cup.runtime.Symbol(28/*AddOp*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // Relation ::= T_GTE 
            {
              Object RESULT = null;
		
                        RESULT = ">=";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // Relation ::= T_LTE 
            {
              Object RESULT = null;
		
                        RESULT = "<=";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // Relation ::= T_GT 
            {
              Object RESULT = null;
		
                        RESULT = ">";
                      
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // Relation ::= T_LT 
            {
              Object RESULT = null;
		
						RESULT = "<";
					
              CUP$parser$result = new java_cup.runtime.Symbol(26/*Relation*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // UnarySign ::= T_MINUS 
            {
              String RESULT = null;
		
				  RESULT = "-";
				
              CUP$parser$result = new java_cup.runtime.Symbol(34/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // UnarySign ::= T_PLUS 
            {
              String RESULT = null;
		
				  RESULT = "+";
				
              CUP$parser$result = new java_cup.runtime.Symbol(34/*UnarySign*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // Equality ::= T_NEQ 
            {
              Object RESULT = null;
		
    				RESULT = "!=";
    			
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // Equality ::= T_EQU 
            {
              Object RESULT = null;
		
					RESULT = "==";
				
              CUP$parser$result = new java_cup.runtime.Symbol(25/*Equality*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // Expr8 ::= Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // Expr8 ::= Expr8 MulOp Designator 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //Check #1
                        if(_2.equals("*"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1,new MulOp(), _3);
                        else if(_2.equals("/"))
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new DivOp(),_3);
                        else
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new ModOp(),_3); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(46/*Expr8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // Expr7 ::= Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // Expr7 ::= Expr7 AddOp Expr8 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //Check #1
                        if(_2.equals("+"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new AddOp(), _3);
                        else
                          RESULT = ((MyParser)parser).DoBinaryExpr(_1,new MinusOp(),_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(45/*Expr7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // Expr6 ::= Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // Expr6 ::= Expr6 Relation Expr7 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        //check #0
                    	if(_2.equals("<"))
                    	  RESULT = ((MyParser) parser).DoBinaryExpr(_1, new LessThanOp(), _3);
                        else if (_2.equals("<="))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new LessAndEqualThanOp(), _3);
                        else if(_2.equals(">"))
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new GreaterThanOp(), _3);
                        else
                          RESULT = ((MyParser) parser).DoBinaryExpr(_1, new GreaterAndEqualThanOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(44/*Expr6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // Expr5 ::= Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // Expr5 ::= Expr5 Equality Expr6 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _2 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    	if(_2.equals("=="))
                        	RESULT = ((MyParser) parser).DoBinaryExpr(_1, new EqualOp(), _3);
                        else
                        	RESULT = ((MyParser) parser).DoBinaryExpr(_1, new NotEqualOp(), _3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(43/*Expr5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // Expr4 ::= Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      RESULT = _1;
                 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Expr4 ::= Expr4 T_AMPERSAND Expr5 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwAndOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(42/*Expr4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // Expr3 ::= Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   RESULT = _1;
                 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // Expr3 ::= Expr3 T_CARET Expr4 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwXorOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(41/*Expr3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // Expr2 ::= Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                    RESULT = _1;
                 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // Expr2 ::= Expr2 T_BAR Expr3 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = ((MyParser) parser).DoBinaryExpr(_1, new BwOrOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(40/*Expr2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // Expr1 ::= Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = _1;
                 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // Expr1 ::= Expr1 T_AND Expr2 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   RESULT = ((MyParser) parser).DoBinaryExpr(_1, new AndOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(39/*Expr1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // Expr0 ::= Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = _1;
                 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // Expr0 ::= Expr0 T_OR Expr1 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _3 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					RESULT = ((MyParser) parser).DoBinaryExpr(_1, new OrOp(), _3);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(38/*Expr0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // Expr ::= Expr0 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			       RESULT = _1;
                 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // Expr ::= Designator T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   RESULT = ((MyParser) parser).DoAssignExpr (_1, _2);
                 
              CUP$parser$result = new java_cup.runtime.Symbol(37/*Expr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // ExprList ::= ExprList T_COMMA Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    			   _1.addElement(_2);
    			   RESULT = _1;
    			 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // ExprList ::= Expr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				   Vector<STO> v = new Vector<STO>();
				   v.addElement(_1);
				   RESULT = v;
				 
              CUP$parser$result = new java_cup.runtime.Symbol(72/*ExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // OptExprList ::= 
            {
              Vector RESULT = null;
		
    				  RESULT = new Vector<Type>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // OptExprList ::= ExprList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(71/*OptExprList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // ConstExpr ::= Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                   RESULT = _1; 
                 
              CUP$parser$result = new java_cup.runtime.Symbol(53/*ConstExpr*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // WritePair ::= T_ENDL 
            {
              String RESULT = null;
		
          STO tmp = new ConstSTO("\n");
		  ((MyParser)parser).DoCoutStmt(tmp);
	    
              CUP$parser$result = new java_cup.runtime.Symbol(36/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // WritePair ::= Expr 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		 ((MyParser)parser).DoCoutStmt(_1);
		 //TODO, cout << a << endl
	   
              CUP$parser$result = new java_cup.runtime.Symbol(36/*WritePair*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // WritePairList ::= WritePairList T_OSTREAM WritePair 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		      /*_1 += _2;
		      RESULT = _1;*/
		    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // WritePairList ::= WritePair 
            {
              String RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		      /*String tmp = "";
		      tmp += _1;
		      RESULT = tmp;*/
		    
              CUP$parser$result = new java_cup.runtime.Symbol(35/*WritePairList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // WriteStmt ::= T_COUT T_OSTREAM WritePairList T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
		      //((MyParser)parser).DoCoutStmt(_1);
		    
              CUP$parser$result = new java_cup.runtime.Symbol(22/*WriteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DeleteStmt ::= T_DELETE Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                    //Check the VarSTO is valid for delete statement
                    ((MyParser) parser).DoDeleteStmtCheck(_1);  
                
              CUP$parser$result = new java_cup.runtime.Symbol(24/*DeleteStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // NewStmt ::= T_NEW Designator T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                   //Check the VarSTO is valid for new statement
                    ((MyParser) parser).DoNewStmtCheck(_1);      
                         
                
              CUP$parser$result = new java_cup.runtime.Symbol(23/*NewStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // ReadStmt ::= T_CIN T_ISTREAM Designator T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(21/*ReadStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // ReturnStmt ::= T_RETURN Expr T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
         	       ((MyParser)parser).DoReturnCheck(_1); 
         	     
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // ReturnStmt ::= T_RETURN T_SEMI 
            {
              Object RESULT = null;
		
  				   //((MyParser) parser).DoReturnCheck(new VoidType("void",4));
  				   ((MyParser) parser).DoReturnCheck(new ExprSTO("void",new VoidType("void",4)));
  				 
              CUP$parser$result = new java_cup.runtime.Symbol(20/*ReturnStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // ExitStmt ::= T_EXIT T_LPAREN Expr T_RPAREN T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                       //DoExitStmtCheck if Expr is assignable to an int
                       ((MyParser) parser).DoExitStmtCheck(_1); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(19/*ExitStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // ContinueStmt ::= T_CONTINUE T_SEMI 
            {
              Object RESULT = null;
		 
                      //Check illegal continue statement
                      //continue statement should be inside the while loop
                      ((MyParser) parser).DoContinueStmtCheck(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(18/*ContinueStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // BreakStmt ::= T_BREAK T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                     //Check illegal break statement
                     //break statement should be inside the while loop
                      ((MyParser) parser).DoBreakStmtCheck(); 
                    
              CUP$parser$result = new java_cup.runtime.Symbol(17/*BreakStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // WhileStmt ::= T_WHILE Expr NT$12 CodeBlock 
            {
              Object RESULT = null;
              // propagate RESULT from NT$12
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
					  RESULT = ((MyParser) parser).DoIfWhileExpr(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(16/*WhileStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // NT$12 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					  //Set inwhile to be true if it was false, increment the while level
					  ((MyParser)parser).DoWhileStmt();
					
              CUP$parser$result = new java_cup.runtime.Symbol(86/*NT$12*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // OptElse ::= 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // OptElse ::= T_ELSE NT$11 CodeBlock 
            {
              String RESULT = null;
              // propagate RESULT from NT$11
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(32/*OptElse*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // NT$11 ::= 
            {
              Object RESULT = null;

					  ((MyParser)parser).DoElseStmtStart();
					  RESULT = "else";
					
              CUP$parser$result = new java_cup.runtime.Symbol(85/*NT$11*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // IfStmt ::= T_IF Expr NT$9 CodeBlock NT$10 OptElse 
            {
              Object RESULT = null;
              // propagate RESULT from NT$9
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$10
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  if(_2 == null)
					    ((MyParser)parser).DoElseStmtStart();
					  ((MyParser)parser).DoIfStmtEnd();
					
              CUP$parser$result = new java_cup.runtime.Symbol(15/*IfStmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // NT$10 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;

					  ((MyParser)parser).DoIfYesStmtEnd();
					
              CUP$parser$result = new java_cup.runtime.Symbol(84/*NT$10*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // NT$9 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

					  RESULT = ((MyParser) parser).DoIfWhileExpr(_1);
					  ((MyParser)parser).DoIfYesStmt(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(83/*NT$9*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ArrElemsList ::= ArrElemsList T_COMMA Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*ArrElemsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // ArrElemsList ::= Expr 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(27/*ArrElemsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // OptInit ::= 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // OptInit ::= T_ASSIGN T_LBRACE ArrElemsList T_RBRACE 
            {
              STO RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(51/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // OptInit ::= T_ASSIGN Expr 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(51/*OptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // IdListWInit ::= IdListWInit T_COMMA OptModifiers T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
		  RESULT = _1;
		  if(_2.isError()){
            RESULT = new Vector();
          }
          else{
            VarSTO v = new VarSTO(_3);
            v.setInit(_2);
            v.setStatic(false);
			RESULT.addElement (v);
		  }
	    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // IdListWInit ::= OptModifiers T_ID T_ASSIGN ConstExpr 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                      if(_2.isError()){
                        RESULT = new Vector();
                      }
                      else{
                        VarSTO v = new VarSTO(_1);
                        v.setInit(_2);
                        v.setStatic(false);
			            RESULT = new Vector ();
			            RESULT.addElement (v);
			          }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(68/*IdListWInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // IdListWOptInit ::= IdListWOptInit T_COMMA OptModifiers T_ID OptInit 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _4 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_2 != null){
	                        if(_2.isError())
	                          RESULT = new Vector();
	                        else{
		                        RESULT = _1;
		                        VarSTO v = new VarSTO(_3);
		                        v.setInit(_2);
		                        v.setStatic(false);
		                        //If there's modifier
		                        if(_4 != null)
			                        v.setType(_4);
		                        RESULT.addElement (v);
		                    }
		                }
		                //No init applied
	                    else{
	                      RESULT = _1;
		                  VarSTO v = new VarSTO(_3);
		                  v.setStatic(false);
		                  //If there's modifier
		                  if(_4 != null)
			                v.setType(_4);
		                  RESULT.addElement (v);
	                    }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // IdListWOptInit ::= OptModifiers T_ID OptInit 
            {
              Vector RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _3 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        if(_2 != null)
                        {
                          if(_2.isError())
                            RESULT = new Vector();
                          else{
	                        //Check if the OptInit is known at compile time
	                        VarSTO v = new VarSTO(_1);
	                        v.setInit(_2);
	                        v.setStatic(false);
	                        if(_3 != null)
	                          v.setType(_3);	                      
	                        RESULT = new Vector();
	                        RESULT.addElement (v);
	                      }
	                    }
	                    //No init applied
	                    else{
	                      VarSTO v = new VarSTO(_1);
	                      v.setStatic(false);
	                      if(_3 != null)
	                        v.setType(_3);	                      
	                      RESULT = new Vector();
	                      RESULT.addElement (v);
	                    }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(67/*IdListWOptInit*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // IdListUpper ::= IdListUpper T_COMMA T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        RESULT.addElement (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // IdListUpper ::= T_ID_U 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = new Vector ();
                        RESULT.addElement (_1);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(66/*IdListUpper*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // IdList ::= IdList T_COMMA OptModifiers T_ID 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        RESULT = _1;
                        VarSTO v = new VarSTO(_3);
                        if(_2 != null){
                          if(_2.isError()){
                            //Return an empty vector to indicate an error
                            RESULT = new Vector();
                          }
                          else{
                            v.setType(_2);
                            RESULT.addElement(v);
                          }
                        }
                        //No optional modifiers
                        else{
                          //Return an vector of VarSTO
                          RESULT.addElement (v);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // IdList ::= OptModifiers T_ID 
            {
              Vector RESULT = null;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        VarSTO v = new VarSTO(_1);
                        if(_2 != null){
                          if(_2.isError()){
                            //Return an empty vector to indicate an error
                            RESULT = new Vector();
                          }
                          else{
                            //Composite type
                            v.setType(_2);
                            RESULT = new Vector();
                            RESULT.addElement(v);
                          }
                        }
                        //No optional modifiers
                        else{
                          //Return an vector of VarSTO
                          RESULT = new Vector ();
                          RESULT.addElement (v);
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(65/*IdList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // OptRef ::= 
            {
              String RESULT = null;
		 //Here is parameter pass by value
    				 	RESULT ="";		
					 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // OptRef ::= T_AMPERSAND 
            {
              String RESULT = null;
		 //Here is parameter pass by reference
					   RESULT = "&";
					 
              CUP$parser$result = new java_cup.runtime.Symbol(31/*OptRef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ParamDecl ::= Type OptRef T_ID 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  //Check #5 parameter type check, return the type's name
					  //if OptRef is a reference
					  if(_3.equals("&")){
					    _1.setReference(true);
					    RESULT = new VarSTO(_2, _1);
					  }
					  else
					    RESULT = new VarSTO(_2, _1);
					  
					
              CUP$parser$result = new java_cup.runtime.Symbol(52/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ParamList ::= ParamList T_COMMA ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				  //Return the vector with the _2 add to the back
    				  _1.addElement(_2);
    				  RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ParamList ::= ParamDecl 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  //Return the vector of parameter types
					  Vector<STO> v = new Vector<STO>();
					  v.addElement(_1);
					  RESULT = v;
					
              CUP$parser$result = new java_cup.runtime.Symbol(70/*ParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // OptParamList ::= 
            {
              Vector RESULT = null;
		
    				  RESULT = new Vector<STO>();
    				
              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // OptParamList ::= ParamList 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  //Return a list of parameter
					  RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(69/*OptParamList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Stmt ::= DeleteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Stmt ::= NewStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // Stmt ::= WriteStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // Stmt ::= ReadStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // Stmt ::= ReturnStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // Stmt ::= ExitStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // Stmt ::= ContinueStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // Stmt ::= BreakStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // Stmt ::= WhileStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // Stmt ::= IfStmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // Stmt ::= Expr T_SEMI 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // Stmt ::= CodeBlock 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // Stmt ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Stmt ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Stmt ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(13/*Stmt*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // StmtList ::= StmtList Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // StmtList ::= Stmt 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(12/*StmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // OptStmtList ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // OptStmtList ::= StmtList 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(11/*OptStmtList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CodeBlock ::= T_LBRACE NT$7 OptStmtList NT$8 T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$7
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
              // propagate RESULT from NT$8
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

              CUP$parser$result = new java_cup.runtime.Symbol(14/*CodeBlock*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // NT$8 ::= 
            {
              Object RESULT = null;
 
		              ((MyParser) parser).DoBlockClose();     
		            
              CUP$parser$result = new java_cup.runtime.Symbol(82/*NT$8*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // NT$7 ::= 
            {
              Object RESULT = null;
 ((MyParser) parser).DoBlockOpen(); 
              CUP$parser$result = new java_cup.runtime.Symbol(81/*NT$7*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ReturnType ::= T_VOID 
            {
              Type RESULT = null;
		
    				  RESULT = new VoidType("void", 4);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(59/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ReturnType ::= SubType OptPointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
                        // You should determine the type and return it here
                        if(_2 != null){
                          ((PointerType)_2).setElementType(_1);
                          _2.setName(((PointerType)_2).getPrintedName()+"*");
                          RESULT = _2;
                        }else{
                          RESULT = _1;
                        }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(59/*ReturnType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Pointer ::= T_STAR 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Object _1 = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				     RESULT = new PointerType("pointer", 4);
				   
              CUP$parser$result = new java_cup.runtime.Symbol(62/*Pointer*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PointerList ::= PointerList Pointer 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    			     ((PointerType)_2).setElementType(_1);
    			     RESULT = _2;
    			   
              CUP$parser$result = new java_cup.runtime.Symbol(63/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PointerList ::= Pointer 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				     RESULT = _1;
				   
              CUP$parser$result = new java_cup.runtime.Symbol(63/*PointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // OptPointerList ::= 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(64/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OptPointerList ::= PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(64/*OptPointerList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OptModifiers ::= 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OptModifiers ::= T_LBRACKET ConstExpr T_RBRACKET 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
					  //Modifier for array type
					  //Check #10, illegal array declaration
					  RESULT = ((MyParser) parser).DoArrayDeclCheck(_1);
					
              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OptModifiers ::= PointerList 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  RESULT = _1;
					
              CUP$parser$result = new java_cup.runtime.Symbol(61/*OptModifiers*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // BasicType ::= T_CHAR 
            {
              Type RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(55/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // BasicType ::= T_BOOL 
            {
              Type RESULT = null;
		
    				  RESULT = new BoolType("bool", 4);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(55/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // BasicType ::= T_FLOAT 
            {
              Type RESULT = null;
		
    				  RESULT = new FloatType("float", 4);
    				
              CUP$parser$result = new java_cup.runtime.Symbol(55/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BasicType ::= T_INT 
            {
              Type RESULT = null;
		
					  RESULT = new IntType("int", 4);
					
              CUP$parser$result = new java_cup.runtime.Symbol(55/*BasicType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DeclareType ::= T_DECLTYPE NT$6 T_LPAREN Expr T_RPAREN 
            {
              Type RESULT = null;
              // propagate RESULT from NT$6
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Type) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				   ((MyParser)parser).doDecltypeDone();
				    if(_1.isError())
				      RESULT = new ErrorType("decl error", 4);
				    else{
				      Type t = _1.getType().clone();	
				      t.setName(_1.getType().getName());
				      RESULT = t;
				    }
				     
				 
              CUP$parser$result = new java_cup.runtime.Symbol(60/*DeclareType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // NT$6 ::= 
            {
              Object RESULT = null;

				   ((MyParser) parser).doDecltype();
				 
              CUP$parser$result = new java_cup.runtime.Symbol(80/*NT$6*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SubType ::= DeclareType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    			  //Add for check#3c decltype keyword
    			  RESULT = _1;
    			
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SubType ::= BasicType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    				  RESULT = _1;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SubType ::= QualIdent 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
			     //Get the basic type out of TypedefSTO
			     //modifiy the previous type and set its name to be the correct typedef ID
			     if(_1.isError()){
			       RESULT = new ErrorType("type not found", 4);
			     }
			     else{
			       Type t = _1.getType().clone();
				   t.setName(_1.getName());
			       RESULT = t;
			     }
			   
              CUP$parser$result = new java_cup.runtime.Symbol(56/*SubType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // UndecoratedType ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    				  //Check#18b
    				  //Store the information of the function pointer type and return
    	    		  FunctionPointerType type = new FunctionPointerType("funcptr", 4);
			    	  //If return by reference
			    	  if(_2.equals("&"))
						_1.setReference(true);
					  type.setReturnType(_1);
					  type.setParameters(_3);
					  type.setName(type.getErrorName());
					  RESULT = type;
    				
              CUP$parser$result = new java_cup.runtime.Symbol(58/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // UndecoratedType ::= SubType 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
					  RESULT = _1; 
					
              CUP$parser$result = new java_cup.runtime.Symbol(58/*UndecoratedType*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // Type ::= T_FUNCPTR T_COLON ReturnType OptRef T_LPAREN OptParamList T_RPAREN 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
    	    //Store the information of the function pointer type and return
    	    FunctionPointerType type = new FunctionPointerType("funcptr", 4);
    	    //If return by reference
    	    if(_2.equals("&"))
			  _1.setReference(true);
		    type.setReturnType(_1);
		    type.setParameters(_3);
		    type.setName(type.getErrorName());
		    RESULT = type;
    	 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Type ::= SubType OptModifiers 
            {
              Type RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				   //If there's modifiers
				   if(_2 != null){
				     if(_2.isError()){
				       RESULT = _2;
				     }
				     else{
				       ((CompositeType)_2).setElementType(_1);
				       RESULT = _2;
				       if(_2.isArray()){
				         ((CompositeType)_2).setName(_1.getName()+"[" + 
							((ArrayType)(_2)).getArraySize() + "]");
					     int size = 0;
					     for(int j = 0; j < ((ArrayType)(_2)).getArraySize(); j++){
						   size += _1.getSize();
					     }
					     ((ArrayType)_2).setSize(size);
				       }
				       else if(_2.isPointer()){
					     //Get name of the pointer
					     ((PointerType)_2).setName(
							((PointerType)_2).getPrintedName() + "*");
					   }
				     }
				   }
				   else{
				     RESULT = _1;
				   }
				 
              CUP$parser$result = new java_cup.runtime.Symbol(57/*Type*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FuncDecl ::= T_EXTERN T_FUNCTION T_COLON ReturnType T_ID NT$4 T_LPAREN OptParamList T_RPAREN NT$5 T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$4
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
              // propagate RESULT from NT$5
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(6/*FuncDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NT$5 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(79/*NT$5*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$4 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).DoFuncDecl_1(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(78/*NT$4*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FuncDef ::= T_FUNCTION T_COLON ReturnType OptRef T_ID NT$2 T_LPAREN OptParamList T_RPAREN NT$3 T_LBRACE OptStmtList T_RBRACE 
            {
              Object RESULT = null;
              // propagate RESULT from NT$2
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-7)).value;
              // propagate RESULT from NT$3
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-10)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-10)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-9)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-9)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-8)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-8)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		
                    	//Close scope 
                        ((MyParser) parser).DoFuncDecl_2();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(5/*FuncDef*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-12)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NT$3 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        ((MyParser) parser).DoFormalParams(_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(77/*NT$3*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NT$2 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _4left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _4right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _4 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		String _2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;

                        ((MyParser) parser).SaveLineNum ();
						if(_4.equals("&"))
						  _1.setReference(true);
                        ((MyParser) parser).DoFuncDecl_1(_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(76/*NT$2*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FieldList ::= UndecoratedType IdList T_SEMI 
            {
              Vector RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
				     //Vector of 0 size, error
				     if(_2.size() == 0){
				       RESULT = _2;
				     }
				     Vector<VarSTO> v = new Vector<VarSTO>();
				     for(int i = 0; i < _2.size(); i++){
				       VarSTO tmp = (VarSTO)_2.elementAt(i);
				       //If the type is not set
				       
				       if(tmp.getType() == null){
				         tmp.setType(_1);
				       }
				       else if(tmp.getType().isError()){
				         RESULT = new Vector();
				       }
				       else if(tmp.getType().isStruct()){				         
				       }
				       else if(tmp.getType().isArray()){
				         ((ArrayType)tmp.getType()).setElementType(_1.clone());
				         tmp.getType().setSize(((ArrayType)tmp.getType()).getArraySize() 
							* (_1.getSize()));
					     //Set name
					     ((ArrayType)tmp.getType()).setName(_1.getName()+"[" + 
							((ArrayType)(tmp.getType())).getArraySize() + "]");
				       }
				       else if(tmp.getType().isPointer()){
				         ((PointerType)tmp.getType()).setElementType(_1.clone());
					     //Get name of the pointer
					     ((PointerType)tmp.getType()).setName(
							((PointerType)tmp.getType()).getPrintedName() + "*");
					   }
				       else{
				         ((CompositeType)(tmp.getType())).setElementType(_1);
				         //check if is an array type ,set the size
				         
				       }
				       v.addElement(tmp);
				     }
				     RESULT = v;
				  
              CUP$parser$result = new java_cup.runtime.Symbol(73/*FieldList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FieldsList ::= FieldsList FieldList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _1 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
    			  
    			   if(_1 != null && _1.isError()){
    			     //If error already occur, still keep checking but return error
    			     ((MyParser) parser).DoStructFieldDecl(_2);
    			     RESULT = _1;
    			   }
    			   else{
    			     RESULT = ((MyParser) parser).DoStructFieldDecl(_2);
    			   }
    			 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FieldsList ::= FieldList 
            {
              STO RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right;
		Vector _1 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-0)).value;
		
				   RESULT = ((MyParser) parser).DoStructFieldDecl(_1);
				 
              CUP$parser$result = new java_cup.runtime.Symbol(54/*FieldsList*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TypedefDecl ::= T_STRUCTDEF T_ID_U T_LBRACE NT$1 FieldsList T_RBRACE T_SEMI 
            {
              Object RESULT = null;
              // propagate RESULT from NT$1
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		
                       //If error occurs
                       if(_2 != null){
                         //Get the vector of locals from the current scope, which is the fields of the struct
                         ((MyParser) parser).DoBlockClose();
                       }else{
                         //Get the vector of locals from the current scope, which is the fields of the struct
                         ((MyParser) parser).DoStructFieldFill();
                         ((MyParser) parser).DoBlockClose();
                       }
                       ((MyParser) parser).DoStructdefDeclEnd();
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NT$1 ::= 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;

                        //Put the struct name into the symbol table for recursive define
                        ((MyParser) parser).DoStructdefDecl(_1);
                        ((MyParser) parser).DoBlockOpen();
                       
                    
              CUP$parser$result = new java_cup.runtime.Symbol(75/*NT$1*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TypedefDecl ::= T_TYPEDEF Type IdListUpper T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _1 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _2 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                        //insert TypeDef STO into the symbol table
                        ((MyParser) parser).DoTypedefDecl (_1, _2);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(10/*TypedefDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // OptStatic ::= 
            {
              String RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(33/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // OptStatic ::= T_STATIC 
            {
              String RESULT = null;
		
				  RESULT = "static";
				
              CUP$parser$result = new java_cup.runtime.Symbol(33/*OptStatic*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // ConstDecl ::= OptStatic T_CONST T_AUTO T_ID T_ASSIGN Expr T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                 // Assign _1 with the type _2 have and put in a symbol table
    			 //TODO, auto static
		 		  ((MyParser) parser).DoConstAutoDeclaration(_1,_2);
               
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // ConstDecl ::= OptStatic T_CONST UndecoratedType IdListWInit T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       //If the static keyword is provided
                       if(_1 != null){
                         Vector<VarSTO> v = new Vector<VarSTO>();
                         for(int i = 0; i < _3.size(); i++){
                           VarSTO s = (VarSTO)_3.elementAt(i);
                           s.setStatic(true);
                           v.addElement(s);
                         }
                         ((MyParser) parser).DoConstDecl (v, _2);
                       }
                       else{
                         ((MyParser) parser).DoConstDecl (_3, _2);
                       }
                   
                    
              CUP$parser$result = new java_cup.runtime.Symbol(9/*ConstDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // VarDecl ::= OptStatic T_AUTO T_ID T_ASSIGN Expr T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		String _3 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		STO _2 = (STO)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 
                  // Assign _1 with the type _2 have and put in a symbol table
                  ((MyParser) parser).DoAutoDeclaration(_1,_2,_3);
                
              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // VarDecl ::= OptStatic UndecoratedType IdListWOptInit T_SEMI 
            {
              Object RESULT = null;
		int _1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int _1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String _1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int _2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int _2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Type _2 = (Type)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         //If error occured, which return a empty vector
                         if(_3.size() == 0){
                         }
                         else{
	                         //If the static keyword is provided
	                         if(_1 != null){
	                           Vector<VarSTO> v = new Vector<VarSTO>();
	                           for(int i = 0; i < _3.size(); i++){
	                             VarSTO s = (VarSTO)_3.elementAt(i);
	                             s.setStatic(true);
	                             //s.setType(_2);
	                             v.addElement(s);
	                           }
	                           ((MyParser) parser).DoVarDecl (v,_2);
	                         }
	                         else{
	                            ((MyParser) parser).DoVarDecl (_3,_2);
	                         }
	                     }
                    
              CUP$parser$result = new java_cup.runtime.Symbol(8/*VarDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // ExternDecl ::= T_EXTERN UndecoratedType IdList T_SEMI 
            {
              Object RESULT = null;
		int _3left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int _3right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Vector _3 = (Vector)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                         ((MyParser) parser).DoExternDecl (_3);
                    
              CUP$parser$result = new java_cup.runtime.Symbol(7/*ExternDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // GlobalDecl ::= FuncDef 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // GlobalDecl ::= FuncDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // GlobalDecl ::= TypedefDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // GlobalDecl ::= ConstDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // GlobalDecl ::= VarDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // GlobalDecl ::= ExternDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(4/*GlobalDecl*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // GlobalDecls ::= GlobalDecls GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // GlobalDecls ::= GlobalDecl 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(3/*GlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // OptGlobalDecls ::= 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // OptGlobalDecls ::= GlobalDecls 
            {
              Object RESULT = null;

              CUP$parser$result = new java_cup.runtime.Symbol(2/*OptGlobalDecls*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // Program ::= NT$0 OptGlobalDecls 
            {
              Object RESULT = null;
              // propagate RESULT from NT$0
              if ( ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value != null )
                RESULT = (Object) ((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		
                       ((MyParser) parser).DoProgramEnd();
               
              CUP$parser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // NT$0 ::= 
            {
              Object RESULT = null;

                         ((MyParser) parser).DoProgramStart(); 
               
              CUP$parser$result = new java_cup.runtime.Symbol(74/*NT$0*/, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-0)).right, RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

